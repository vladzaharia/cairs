<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SasquatchCAIRS</name>
    </assembly>
    <members>
        <member name="M:SasquatchCAIRS.Controllers.ExcelExportController.exportDataTable(SasquatchCAIRS.Models.Constants.ReportType,System.Collections.Generic.Dictionary{System.String,System.Data.DataTable},System.String,System.String)">
            <summary>
                Given a list of datatables, and the reportyType, it generates a excel file
                using correct template and the data given
            </summary>
            <param name="reportType">Either Report or AuditLog from constants</param>
            <param name="tableDictionary">
            dictionary of the tables to be exported. for either type,
                the number of tables in the list must not exceed 15</param>
            <param name="templatePath">template file path</param>
            <param name="workingCopyPath">working copy path</param>
        </member>
        <member name="M:SasquatchCAIRS.Controllers.ExcelExportController.getWorksheetPart(DocumentFormat.OpenXml.Packaging.WorkbookPart,System.String)">
            <summary>
                Finds the worksheetPart with given sheetName
            </summary>
            <param name="workbookPart">workbook part which contains the worksheet we are looking for</param>
            <param name="sheetName">name of the worksheet it's looking for</param>
            <returns>worksheetPart with given name</returns>
        </member>
        <member name="M:SasquatchCAIRS.Controllers.ExcelExportController.fixChartData(DocumentFormat.OpenXml.Packaging.ChartPart,System.Int32,System.Int32)">
            <summary>
                given a chartPart, which has fixed data range from the template
                this method corrects the XML so the chart covers the correct range of data
            </summary>
            <param name="chartPart">Chartpart to be fixed</param>
            <param name="totalRowCount">total number of dataRows of the data</param>
            <param name="totalColCount">total nu</param>
        </member>
        <member name="M:SasquatchCAIRS.Controllers.ExcelExportController.getColumnName(System.Int32)">
            <summary>
                Gets the Excel column name based on a supplied index number.
            </summary>
            <returns>1 = A, 2 = B... 27 = AA, etc.</returns>
        </member>
        <member name="M:SasquatchCAIRS.Controllers.ExcelExportController.createTextCell(System.Int32,System.Int32,System.Object)">
            <summary>
                creates a Cell for the given column+row index and the value
            </summary>
            <param name="columnIndex">column index of the cell</param>
            <param name="rowIndex">row index of the cell</param>
            <param name="cellValue">cell value</param>
            <returns>a cell with given value filled in as a string representation</returns>
        </member>
        <member name="M:SasquatchCAIRS.Controllers.ExcelExportController.createNumCell(System.Int32,System.Int32,System.Object)">
            <summary>
                creates a Cell for the given column+row index and the value
            </summary>
            <param name="columnIndex">column index of the cell</param>
            <param name="rowIndex">row index of the cell</param>
            <param name="cellValue">cell value</param>
            <returns>a cell with given value filled in as a number representation</returns>
        </member>
        <member name="M:SasquatchCAIRS.Controllers.ExcelExportController.createContentRow(SasquatchCAIRS.Models.Constants.CellDataType,System.Data.DataRow,System.Int32)">
            <summary>
                Creates a content row for the given dataRow
            </summary>
            <param name="cellType"></param>
            <param name="dataRow">dataRow that contains the data for the row it's creating</param>
            <param name="rowIndex">index for the row in the table</param>
            <returns>returns dataRow with proper data filled in</returns>
        </member>
        <member name="M:SasquatchCAIRS.Controllers.ExcelExportController.MergeTwoCells(DocumentFormat.OpenXml.Spreadsheet.Worksheet,System.String,System.String)">
            <summary>
            merges the cell with the given range in the given worksheet
            </summary>
            <param name="worksheet">worksheet the mergecell belongs to</param>
            <param name="cell1Name">start range of the merge cell</param>
            <param name="cell2Name">end range of the merge cell</param>
        </member>
        <member name="M:SasquatchCAIRS.Controllers.ExcelExportController.deleteAWorkSheet(DocumentFormat.OpenXml.Packaging.WorkbookPart,System.String)">
            <summary>
            deletes a sheet given the workbook the sheet is in and the sheetname;
            </summary>
            <param name="wbPart">workbook the sheet is part of</param>
            <param name="sheetToDelete">the name of the sheet to be deleted</param>
        </member>
        <member name="M:SasquatchCAIRS.Controllers.AuditLogManagementController.addEntry(System.Int64,System.Int32,SasquatchCAIRS.Models.Constants.AuditType)">
            <summary>
                Add entry to audit log table when an AuditType action is performed on a request.
            </summary>
            <param name="requestId">The ID of the Request</param>
            <param name="userId">The ID of the User</param>
            <param name="type">The type of audit action</param>
        </member>
        <member name="M:SasquatchCAIRS.Controllers.AuditLogManagementController.addEntry(System.Int64,System.Int32,SasquatchCAIRS.Models.Constants.AuditType,System.DateTime)">
            <summary>
                Add entry to audit log table when an AuditType action is performed on a request.
            </summary>
            <param name="requestId">The ID of the Request</param>
            <param name="userId">The ID of the User</param>
            <param name="type">The type of audit action</param>
            <param name="dateTime"></param>
        </member>
        <member name="M:SasquatchCAIRS.Controllers.AuditLogManagementController.createReportForRequest(System.Collections.Generic.List{SasquatchCAIRS.Request})">
            <summary>
                Create an audit report with all AuditLog entries for a specified request ID.
            </summary>
            <param name="auditRequests">The request to track activitiy for</param>
        </member>
        <member name="M:SasquatchCAIRS.Controllers.AuditLogManagementController.createReportForUser(System.Collections.Generic.IEnumerable{System.Int64},System.DateTime,System.DateTime)">
            <summary>
                Create an audit report with all AuditLog entries for a specified user in a specified date range.
            </summary>
            <param name="userIDs">The user ID to track activitiy for</param>
            <param name="startDate"> The start of the specified date range</param>
            <param name="endDate">The end of the specified date range</param>
        </member>
        <member name="T:SasquatchCAIRS.Controllers.SearchController">
            <summary>
            Controller responsible for executing searches and returning the corresponding requests
            </summary>
        </member>
        <member name="M:SasquatchCAIRS.Controllers.SearchController.Search(System.String)">
            <summary>
            Given a comma delimited string of keywords returns all requests tbat contain one or more of these keywords
            </summary>
            <param name="keywords">String of comma delimited keywords</param>
            <returns></returns>
        </member>
        <member name="M:SasquatchCAIRS.Controllers.SearchController.Advanced">
            <summary>
            Displays the Advanced Search view and passes in an empty SearchCriteira 
            </summary>
            <returns></returns>
        </member>
        <member name="M:SasquatchCAIRS.Controllers.SearchController.Results(SasquatchCAIRS.Models.SearchSystem.SearchCriteria,System.Web.Mvc.FormCollection)">
            <summary>
            Given a SearchCriteria object and the Advanced Search Form it performs 
            a search based upon that criteria and displays the results
            </summary>
            <param name="criteria">The SearchCriteria object that holds the filtering data</param>
            <param name="form">The Form on the Advanced Search page and all it's data</param>
            <returns></returns>
        </member>
        <member name="M:SasquatchCAIRS.Controllers.SearchController.Modify">
            <summary>
            Populates the Advanced Search page with the SearchCriteria stored in the current Session
            </summary>
            <returns></returns>
        </member>
        <member name="M:SasquatchCAIRS.Controllers.SearchController.isEmptySearchCriteria(SasquatchCAIRS.Models.SearchSystem.SearchCriteria)">
            <summary>
            Checks if SearchCriteria objects are empty/set to default values
            </summary>
            <param name="sc">The SearchCriteria to be checked for not-null values</param>
            <returns>True if the SearchCriteria is empty, false otherwise</returns>
        </member>
        <member name="M:SasquatchCAIRS.Controllers.SearchController.setDropdownViewbags">
            <summary>
            Sets the ViewBag objects to hold dropdown values
            </summary>
        </member>
        <member name="M:SasquatchCAIRS.Controllers.SearchController.typeIDStringtoList(System.String,System.String)">
            <summary>
            Converts an input String into a list of Int, used for Question Type ID and Tumour Group ID
            </summary>
            <param name="input">Input String</param>
            <param name="delimiters">Delimiter inside string</param>
            <returns>Corresponding List of Integers</returns>
        </member>
        <member name="M:SasquatchCAIRS.Controllers.SearchController.keywordsToList(System.String,System.String)">
            <summary>
            Converts a given string into a list of Strings, to separate a  keyword string into individual keywords
            </summary>
            <param name="input">Input string</param>
            <param name="delimiters">Delimiter inside the string</param>
            <returns>Corresponding List of Strings</returns>
        </member>
        <member name="M:SasquatchCAIRS.Controllers.SearchController.enumToIDs(System.String,System.Type)">
            <summary>
            Converts a String into List of Intgers based on its Enum value specified in Constants.cs
            </summary>
            <param name="input">Input String</param>
            <param name="type">Enumeration Type</param>
            <returns>Corresponding List of Integers for that Type and Input</returns>
        </member>
        <member name="M:SasquatchCAIRS.Controllers.SearchController.fillUpKeywordDict(System.Collections.Generic.IEnumerable{SasquatchCAIRS.Request})">
            <summary>
            Given a list of requests fills up the dictionary of each request's keywords
            </summary>
            <param name="requests">List of requests to be displayed</param>
        </member>
        <member name="M:SasquatchCAIRS.Controllers.SearchController.searchCriteriaQuery(SasquatchCAIRS.Models.SearchSystem.SearchCriteria)">
            <summary>
            Get Requests in Database based on SearchCriteria
            </summary>
            <param name="criteria">Search criteria that user inputs</param>
            <returns>List of Requests that match the input </returns>
        </member>
        <member name="T:SasquatchCAIRS.Controllers.RequestController">
            <summary>
            TODO
            </summary>
        </member>
        <member name="M:SasquatchCAIRS.Controllers.Security.RequestLockController.addLock(System.Int64,System.Int32)">
            <summary>
            Add lock to existing request.
            </summary>
            <param name="requestId">The ID of the Request</param>
            <param name="userId">The ID of the User</param>
            <exception cref="T:SasquatchCAIRS.Models.AlreadyLockedException">Exception if request is already locked</exception>
        </member>
        <member name="M:SasquatchCAIRS.Controllers.Security.RequestLockController.removeLock(System.Int64)">
            <summary>
            Remove lock from existing request.
            </summary>
            <param name="requestId">The ID of the Request</param>
        </member>
        <member name="M:SasquatchCAIRS.Controllers.Security.RequestLockController.isLocked(System.Int64)">
            <summary>
            Checks if the request is locked
            </summary>
            <param name="requestId">The ID of the Request</param>
            <returns>True if locked, False otherwise</returns>
        </member>
        <member name="M:SasquatchCAIRS.Controllers.Security.RequestLockController.getRequestLock(System.Int64)">
            <summary>
            Gets the request lock from the database.
            </summary>
            <param name="requestId">The ID of the Request</param>
            <returns>The RequestLock if it exists, null otherwise</returns>
        </member>
        <member name="M:SasquatchCAIRS.Controllers.Security.UserController.loginAndGetUserProfile(System.String)">
            <summary>
            Log into the system and return the user profile for the user.
            </summary>
            <param name="username">The username to login with</param>
            <returns>The UserProfile of the user</returns>
        </member>
        <member name="M:SasquatchCAIRS.Controllers.Security.UserController.getUserProfile(System.String)">
            <summary>
                Get the User Profile for the entered username.
            </summary>
            <param name="username">Username to look for.</param>
            <returns>The UserProfile for the user.</returns>
        </member>
        <member name="M:SasquatchCAIRS.Controllers.Security.UserController.getUserGroups(System.String)">
            <summary>
            Gets the groups for the username specified.
            </summary>
            <param name="username">Username to get groups for.</param>
            <returns>An IEnumerable for the UserGroups</returns>
        </member>
        <member name="M:SasquatchCAIRS.Controllers.Security.UserController.getADInformation(System.String)">
            <summary>
                Get the Active Directory information for the user.
            </summary>
            <param name="loginUsername">Username to search for.</param>
            <returns>An array containing the user information from AD.</returns>
        </member>
        <member name="M:SasquatchCAIRS.Controllers.ServiceSystem.ReportController.checkForDataForMonth(System.DateTime,System.DateTime)">
            <summary>
            checks if any data exists for the given period
            </summary>
            <param name="start">start date stamp</param>
            <param name="end">end date stamp</param>
            <returns>returns true if no data is found</returns>
        </member>
        <member name="M:SasquatchCAIRS.Controllers.ServiceSystem.ReportController.checkForDataForMpy(System.Int32,System.Int32,System.Int32)">
            <summary>
            checks if any data exists for the given period
            </summary>
            <param name="month">month user selected</param>
            <param name="startYear">start year selected by user</param>
            <param name="endYear">end year selected by user</param>
            <returns>returns true if no data is found</returns>
        </member>
        <member name="M:SasquatchCAIRS.Controllers.ServiceSystem.ReportController.checkForDataForFy(System.Int32,System.Int32)">
            <summary>
            checks if any data exists for the given period
            </summary>
            <param name="startYear">start year selected by user</param>
            <param name="endYear">end year selected by user</param>
            <returns>returns true if no data is found</returns>
        </member>
        <member name="M:SasquatchCAIRS.Controllers.ServiceSystem.ReportController.generateMonthlyReport(System.DateTime,System.DateTime,System.Collections.Generic.IEnumerable{SasquatchCAIRS.Models.Constants.DataType},SasquatchCAIRS.Models.Constants.StratifyOption)">
            <summary>
            creates list of dataTables for monthly report, to be exported based on the month and criteria specified
            </summary>
            <param name="startDate">start date, selected by the user</param>
            <param name="endDate">end date, selected by the user</param>
            <param name="dataToDisplay">date Types to represent, selected by the user</param>
            <param name="stratifyBy">stratify option, selected by the user</param>
            <returns>the list of data tables, one table for each data type chosen</returns>
        </member>
        <member name="M:SasquatchCAIRS.Controllers.ServiceSystem.ReportController.generateYearlyReport(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{SasquatchCAIRS.Models.Constants.DataType},SasquatchCAIRS.Models.Constants.StratifyOption)">
            <summary>
            creates list of dataTables for monthly report, to be exported based on the years and criteria specified
            </summary>
            <param name="startYear">start year selected by user</param>
            <param name="endYear">end year selected by user</param>
            <param name="dataToDisplay">date Types to represent, selected by the user</param>
            <param name="stratifyBy">stratify option, selected by the user</param>
            <returns>list of datatables for each data type chosen</returns>
        </member>
        <member name="M:SasquatchCAIRS.Controllers.ServiceSystem.ReportController.generateMonthPerYearReport(System.Int32,System.Int32,System.Int32,System.Collections.Generic.IEnumerable{SasquatchCAIRS.Models.Constants.DataType},SasquatchCAIRS.Models.Constants.StratifyOption)">
            <summary>
            creates list of dataTables for monthly report, to be exported based on the month,the year and criteria specified 
            </summary>
            <param name="month">month of the interest</param>
            <param name="startYear">start year of the report</param>
            <param name="endYear">end year of the report</param>
            <param name="dataToDisplay">list of dataTypes selected by the user</param>
            <param name="stratifyBy">stratify option selected by the user</param>
            <returns></returns>
        </member>
        <member name="M:SasquatchCAIRS.Controllers.ServiceSystem.ReportController.createDtForEachYear(System.Int32,System.Int32,SasquatchCAIRS.Models.Constants.StratifyOption,SasquatchCAIRS.Models.Constants.DataType,System.Collections.Generic.Dictionary{System.Int32,System.Collections.Generic.Dictionary{System.Int32,System.Collections.Generic.List{SasquatchCAIRS.Request}}})">
            <summary>
            Creates a dataTable using given parameters for generateMonthPerYearReport method
            </summary>
            <param name="startYear">start year for the first column</param>
            <param name="endYear">end year for the last column</param>
            <param name="stratifyBy">strafityBy option is passed on to get the stratifyBy Name</param>
            <param name="dataType">dataType option passed on to get the cell daa</param>
            <param name="dictionary">dictionary grouped by stratify groups for rows and 
                                each stratify group sub-grouped into their years for columns</param>
            <returns>DataTable with proper data filled in.</returns>
        </member>
        <member name="M:SasquatchCAIRS.Controllers.ServiceSystem.ReportController.createDtForEachYear(System.Int32,System.Int32,SasquatchCAIRS.Models.Constants.StratifyOption,SasquatchCAIRS.Models.Constants.DataType,System.Collections.Generic.Dictionary{System.Int32,System.Collections.Generic.Dictionary{System.Int32,System.Collections.Generic.List{SasquatchCAIRS.Models.ServiceSystem.QandRwithTimestamp}}})">
            <summary>
            Creates a dataTable using given parameters for generateMonthPerYearReport method
            </summary>
            <param name="startYear">start year for the first column</param>
            <param name="endYear">end year for the last column</param>
            <param name="stratifyBy">strafityBy option is passed on to get the stratifyBy Name</param>
            <param name="dataType">dataType option passed on to get the cell daa</param>
            <param name="dictionary">dictionary grouped by stratify groups for rows and 
                                each stratify group sub-grouped into their years for columns</param>
            <returns>DataTable with proper data filled in.</returns>
        </member>
        <member name="M:SasquatchCAIRS.Controllers.ServiceSystem.ReportController.createDtForEachFiscalYear(System.Int32,System.Int32,SasquatchCAIRS.Models.Constants.StratifyOption,SasquatchCAIRS.Models.Constants.DataType,System.Collections.Generic.Dictionary{System.Int32,System.Collections.Generic.Dictionary{SasquatchCAIRS.Models.ServiceSystem.FiscalYear,System.Collections.Generic.List{SasquatchCAIRS.Request}}})">
            <summary>
            creates a dataTable fore each fiscal year for given stratify grouping
            </summary>
            <param name="startYear">report start year</param>
            <param name="endYear">report end year</param>
            <param name="stratifyBy">stratifyOption to retireve group names</param>
            <param name="dataType">data to be displayed</param>
            <param name="dictionary">requests grouped into stratify group then in to their fiscal year</param>
            <returns>dataTable fore each fiscal year for given stratify grouping</returns>
        </member>
        <member name="M:SasquatchCAIRS.Controllers.ServiceSystem.ReportController.createDtForEachFiscalYear(System.Int32,System.Int32,SasquatchCAIRS.Models.Constants.StratifyOption,SasquatchCAIRS.Models.Constants.DataType,System.Collections.Generic.Dictionary{System.Int32,System.Collections.Generic.Dictionary{SasquatchCAIRS.Models.ServiceSystem.FiscalYear,System.Collections.Generic.List{SasquatchCAIRS.Models.ServiceSystem.QandRwithTimestamp}}})">
            <summary>
            creates a dataTable fore each fiscal year for given stratify grouping
            </summary>
            <param name="startYear">report start year</param>
            <param name="endYear">report end year</param>
            <param name="stratifyBy">stratifyOption to retireve group names</param>
            <param name="dataType">data to be displayed</param>
            <param name="dictionary">QandRwithTimestamp grouped into stratify group then in to their fiscal year</param>
            <returns>dataTable fore each fiscal year for given stratify grouping</returns>
        </member>
        <member name="M:SasquatchCAIRS.Controllers.ServiceSystem.ReportController.createDtForEachMonth(System.DateTime,System.DateTime,SasquatchCAIRS.Models.Constants.StratifyOption,SasquatchCAIRS.Models.Constants.DataType,System.Collections.Generic.Dictionary{System.Int32,System.Collections.Generic.Dictionary{SasquatchCAIRS.Models.ServiceSystem.MonthYearPair,System.Collections.Generic.List{SasquatchCAIRS.Request}}})">
            <summary>
            creates a dataTable fore each fiscal year for given stratify grouping
            </summary>
            <param name="startTime">report start date</param>
            <param name="endTime">report end date</param>
            <param name="stratifyBy">stratifyOption to retireve group names</param>
            <param name="dataType">data to be displayed</param>
            <param name="dictionary">requests grouped into stratify group then in to their month/year pair</param>
            <returns>dataTable fore each  month for given stratify grouping</returns>
        </member>
        <member name="M:SasquatchCAIRS.Controllers.ServiceSystem.ReportController.createDtForEachMonth(System.DateTime,System.DateTime,SasquatchCAIRS.Models.Constants.StratifyOption,SasquatchCAIRS.Models.Constants.DataType,System.Collections.Generic.Dictionary{System.Int32,System.Collections.Generic.Dictionary{SasquatchCAIRS.Models.ServiceSystem.MonthYearPair,System.Collections.Generic.List{SasquatchCAIRS.Models.ServiceSystem.QandRwithTimestamp}}})">
            <summary>
            creates a dataTable fore each fiscal year for given stratify grouping
            </summary>
            <param name="startTime">report start date</param>
            <param name="endTime">report end date</param>
            <param name="stratifyBy">stratifyOption to retireve group names</param>
            <param name="dataType">data to be displayed</param>
            <param name="dictionary">QandRwithTimestamp grouped into stratify group then in to their month</param>
            <returns>dataTable for each month for given stratify grouping</returns>
        </member>
        <member name="M:SasquatchCAIRS.Controllers.ServiceSystem.ReportController.averageTime(System.Collections.Generic.List{SasquatchCAIRS.Request})">
            <summary>
            below are for calculating each cell values for each data type given the list of requests to be used 
            </summary>
            <param name="requestsList">list of requests to find the average time</param>
            <returns>average time spent for the given list of requests</returns>
        </member>
        <member name="M:SasquatchCAIRS.Controllers.ServiceSystem.ReportController.averageTime(System.Collections.Generic.List{SasquatchCAIRS.Models.ServiceSystem.QandRwithTimestamp})">
            <summary>
             below are for calculating each cell values for each data type given the list of QnR to be used 
            </summary>
            <param name="qrList">list of QandRs to find the average time</param>
            <returns>average time spent for the given list of requests</returns>
        </member>
        <member name="M:SasquatchCAIRS.Controllers.ServiceSystem.ReportController.avgTimeFromStartToComplete(System.Collections.Generic.List{SasquatchCAIRS.Request})">
            <summary>
            Given the list of requests, calculates the average time from open to close
            </summary>
            <param name="reqList">list of requests</param>
            <returns>average time from start to complete for given list of requests</returns>
        </member>
        <member name="M:SasquatchCAIRS.Controllers.ServiceSystem.ReportController.avgTimeFromStartToComplete(System.Collections.Generic.List{SasquatchCAIRS.Models.ServiceSystem.QandRwithTimestamp})">
            <summary>
            Given the list of requests, calculates the average time from open to close
            </summary>
            <param name="qrList">list of QandRs with time stamps</param>
            <returns> average time from start to complete for given list of questions</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:SasquatchCAIRS.Controllers.ServiceSystem.ReportController.totalTimeSpent(System.Collections.Generic.IEnumerable{SasquatchCAIRS.Request})" -->
        <!-- Badly formed XML comment ignored for member "M:SasquatchCAIRS.Controllers.ServiceSystem.ReportController.totalTimeSpent(System.Collections.Generic.IEnumerable{SasquatchCAIRS.Models.ServiceSystem.QandRwithTimestamp})" -->
        <member name="M:SasquatchCAIRS.Controllers.ServiceSystem.ReportController.getTypeNames(SasquatchCAIRS.Models.Constants.StratifyOption)">
            <summary>
            creates dictionary for the names of stratify groups to be used in the dataTable 
            </summary>
            <param name="stratifyOption">stratify option selected</param>
            <returns>returns the dictionary of subgroup codes for the stratify option selected</returns>
        </member>
        <member name="M:SasquatchCAIRS.Controllers.ServiceSystem.ReportController.nullableToInt(System.Nullable{System.Int32})">
            <summary>
            currently if the key is null (ie. if the request/question does not have assigned stratify group,
            the key gets set to the highest value
            </summary>
            <param name="key">stratifyGroupID</param>
            <returns>returns the value of the key, or -1 if the key is null</returns>
        </member>
        <member name="T:SasquatchCAIRS.Controllers.WordExportController">
            <summary>
            Deals with exporting a given request to a .docx file
            </summary>
        </member>
        <member name="M:SasquatchCAIRS.Controllers.WordExportController.requestToStrings(SasquatchCAIRS.Request)">
            <summary>
            Given a Request, returns a list of strings that represent all of the Requests data
            </summary>
            <param name="request">The Request to decompose into a list of strings</param>
            <returns>List of strings representing the Request</returns>
        </member>
        <member name="M:SasquatchCAIRS.Controllers.WordExportController.generateDocument(System.Collections.Generic.IEnumerable{System.String},System.String,System.String,System.Int64)">
            <summary>
            Given the input writes out a docx file with the request's data
            </summary>
            <param name="input">The list of strings to turn into paragraphs</param>
            <param name="templatePath">The location of the template on the server</param>
            <param name="destinationPath">Temporary path of file to write on server</param>
            <param name="requestId">The ID of the request to be exported</param>
        </member>
        <member name="M:SasquatchCAIRS.Helper.HtmlPrefixScopeExtensions.CreateItemIndex(System.String)">
            <summary>
            TODO New method.
            </summary>
            <param name="httpContext"></param>
            <param name="collectionName"></param>
            <returns></returns>
        </member>
        <member name="M:SasquatchCAIRS.Helper.HtmlPrefixScopeExtensions.BeginCollectionItemFromIndex(System.Web.Mvc.HtmlHelper,System.String,System.String)">
            <summary>
            TODO New method.
            </summary>
            <param name="html"></param>
            <param name="collectionName"></param>
            <param name="itemIndex"></param>
            <returns></returns>
        </member>
        <member name="M:SasquatchCAIRS.Models.Constants.getStatusString(SasquatchCAIRS.Models.Constants.RequestStatus)">
            <summary>
            Gets the string value for the status
            </summary>
            <param name="status">Status as a Constants.RequestStatus</param>
            <returns>String representing the status</returns>
        </member>
        <member name="M:SasquatchCAIRS.Models.Constants.getReferenceString(SasquatchCAIRS.Models.Constants.ReferenceType)">
            <summary>
            Gets the string value for the reference type
            </summary>
            <param name="type">Reference Type as a Constants.ReferenceType</param>
            <returns>String representing the status</returns>
        </member>
        <member name="M:SasquatchCAIRS.Models.Constants.getGenderString(System.Nullable{SasquatchCAIRS.Models.Constants.Gender})">
            <summary>
            Gets the string value for the gender.
            </summary>
            <param name="gender">Gender as a Constants.Gender</param>
            <returns>String representing the gender</returns>
        </member>
        <member name="M:SasquatchCAIRS.Models.Constants.getDropdownString(System.Nullable{SasquatchCAIRS.Models.Constants.DropdownTable})">
            <summary>
            Get the string value for a dropdown list
            </summary>
            <param name="dropdown">Dropdown list as Constants.DropdownTable</param>
            <returns>String representing the DropdownTable name</returns>
        </member>
        <member name="M:SasquatchCAIRS.Models.Constants.getTableForString(System.String)">
            <summary>
            Get the DropdownTable for a String
            </summary>
            <param name="s">The string to parse</param>
            <returns>The DropdownTable for the string</returns>
        </member>
        <member name="M:SasquatchCAIRS.Models.Constants.getImpactScore(System.Nullable{SasquatchCAIRS.Models.Constants.Severity},System.Nullable{SasquatchCAIRS.Models.Constants.Consequence})">
            <summary>
            Gets the Impact score from severity and consequence
            </summary>
            <param name="severity">Severity as Constants.Severity</param>
            <param name="consequence">Consequence as Constants.Consequence</param>
            <returns>A string representing the impact score.</returns>
        </member>
        <member name="T:SasquatchCAIRS.Controllers.ServiceSystem.DropdownController">
            <summary>
            TODO
            </summary>
        </member>
        <member name="M:SasquatchCAIRS.Controllers.ServiceSystem.DropdownController.getEntries(SasquatchCAIRS.Models.Constants.DropdownTable,System.Boolean)">
            <summary>
            Get all active dropdown entries from a specific table.
            </summary>
            <param name="table">Table containing the entries.</param>
            <param name="activeOnly">True to check only active entries, False to check all</param>
            <returns>List of dropdown table entries.</returns>
        </member>
        <member name="M:SasquatchCAIRS.Controllers.ServiceSystem.DropdownController.addEntry(SasquatchCAIRS.Models.Constants.DropdownTable,SasquatchCAIRS.Models.ServiceSystem.DropdownEntry)">
            <summary>
            Add a new entry to one of the dropdown tables in the database.
            </summary>
            <param name="table">Table to add a new entry to.</param>
            <param name="entry">DropdownEntry containing the value and code,
            if exists.</param>
        </member>
        <member name="M:SasquatchCAIRS.Controllers.ServiceSystem.DropdownController.editEntryStatus(SasquatchCAIRS.Models.Constants.DropdownTable,System.Int32,System.Boolean)">
            <summary>
            Edit a dropdown entry in a given table.
            </summary>
            <param name="table">Dropdown table enum.</param>
            <param name="id">Dropdown entry ID.</param>
            <param name="active">True for active, false for inactive.</param>
        </member>
        <member name="M:SasquatchCAIRS.Controllers.ServiceSystem.DropdownController.createEntry(SasquatchCAIRS.Models.Constants.DropdownTable,System.String,System.String,System.Boolean)">
            <summary>
            Edit an already-existing dropdown entry
            </summary>
            <param name="table">The table the entry is under</param>
            <param name="code">The new code of the entry</param>
            <param name="value">The new value of the entry</param>
            <param name="active">The new status of the entry</param>
        </member>
        <member name="M:SasquatchCAIRS.Controllers.ServiceSystem.DropdownController.editEntry(SasquatchCAIRS.Models.Constants.DropdownTable,System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            Edit an already-existing dropdown entry
            </summary>
            <param name="table">The table the entry is under</param>
            <param name="id">The ID of the entry</param>
            <param name="code">The new code of the entry</param>
            <param name="value">The new value of the entry</param>
            <param name="active">The new status of the entry</param>
        </member>
        <member name="M:SasquatchCAIRS.Controllers.ServiceSystem.DropdownController.getMatchingKeywords(System.String)">
            <summary>
            Returns a list of active keywords from the database which the
            current term is a substring of.
            </summary>
            <param name="term">String to match keywords against.</param>
            <returns>List of matching keywords.</returns>
        </member>
        <member name="M:SasquatchCAIRS.Models.ServiceSystem.QuestionResponseContent.CompareTo(System.Object)">
            <summary>
            Compares the current instance with another QuestionResponseContent
            object and returns an integer that indicates whether the current
            instance precedes, follows, or occurs in the same position in the
            sort order as the other object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            Less than zero if this instance precedes obj in the sort order.
            Zero if this instance occurs in the same position in the sort order
            as obj.
            Greater than zero if this instance follows obj in the sort order.
            </returns>
        </member>
        <member name="M:SasquatchCAIRS.Controllers.ServiceSystem.RequestManagementController.createRequestEntity(SasquatchCAIRS.Models.ServiceSystem.RequestContent)">
            <summary>
            Creates a Request entity based off of the RequestContent.
            </summary>
            <param name="content">Request content holder.</param>
            <returns>Request entity based off content.</returns>
        </member>
        <member name="M:SasquatchCAIRS.Controllers.ServiceSystem.RequestManagementController.createQuestionResponseEntity(SasquatchCAIRS.Models.ServiceSystem.QuestionResponseContent)">
            <summary>
            Create a QuestionResponse entity based off of the
            QuestionResponseContent.
            </summary>
            <param name="content">QuestionResponse content holder.</param>
            <returns>QuestionResponse entity based off of content.</returns>
        </member>
        <member name="M:SasquatchCAIRS.Controllers.ServiceSystem.RequestManagementController.createReferenceEntity(SasquatchCAIRS.Models.ServiceSystem.ReferenceContent)">
            <summary>
            Create a Reference entity based off of the ReferenceContent.
            </summary>
            <param name="content">Reference content holder.</param>
            <returns>Reference entity based off of content.</returns>
        </member>
        <member name="M:SasquatchCAIRS.Controllers.ServiceSystem.RequestManagementController.create(SasquatchCAIRS.Models.ServiceSystem.RequestContent)">
            <summary>
            Creates a new Request in the database, with corresponding
            QuestionResponses and References
            </summary>
            <param name="reqContent">RequestContent containing
            QuestionResponseContents, ReferenceContents and Keywords</param>
        </member>
        <member name="M:SasquatchCAIRS.Controllers.ServiceSystem.RequestManagementController.getKeywordIdAndActivate(System.String)">
            <summary>
            Create a keyword based off a given keyword string.
            </summary>
            <param name="keywordStr">Keyword string to create.</param>
            <returns>Keyword ID of the new keyword, or existing keyword
            ID if already exists.</returns>
        </member>
        <member name="M:SasquatchCAIRS.Controllers.ServiceSystem.RequestManagementController.getRequestDetails(System.Int64)">
            <summary>
            Retrieves all of the request information and content from the
            database for a given request ID.
            </summary>
            <param name="requestId">ID of the specified request.</param>
            <returns>RequestContent contaning QuestionResponseContents,
            ReferenceContents and Keywords.</returns>
        </member>
        <member name="M:SasquatchCAIRS.Controllers.ServiceSystem.RequestManagementController.edit(SasquatchCAIRS.Models.ServiceSystem.RequestContent)">
            <summary>
            Edit a request properties, question-response pairs and references
            for a given request ID.
            </summary>
            <param name="reqContent">
            Request content to modify in the database.
            </param>
        </member>
        <member name="M:SasquatchCAIRS.Controllers.ServiceSystem.RequestManagementController.getQuestionResponseIds(System.Int64)">
            <summary>
            Retrieve the question response IDs associated with a given Request.
            </summary>
            <param name="reqId">Request ID.</param>
            <returns>List of question response IDs.</returns>
        </member>
        <member name="M:SasquatchCAIRS.Controllers.ServiceSystem.RequestManagementController.getKeywordIds(System.Int64,System.Int64)">
            <summary>
            Retrieve the keyword IDs associated with a given QuestionResponse
            in a specific Request.
            </summary>
            <param name="reqId">Request ID.</param>
            <param name="qrId">QuestionResponse ID.</param>
            <returns>List of keyword IDs.</returns>
        </member>
        <member name="M:SasquatchCAIRS.Controllers.ServiceSystem.RequestManagementController.getReferenceIds(System.Int64,System.Int64)">
            <summary>
            Return the reference IDs associated with a given QuestionResponse
            in a specific Request. 
            </summary>
            <param name="reqId">Request ID.</param>
            <param name="qrId">QuestionResponse ID.</param>
            <returns>List of reference IDs.</returns>
        </member>
        <member name="M:SasquatchCAIRS.Controllers.ServiceSystem.RequestManagementController.getQuestionResponseEntity(System.Int64,System.Int64)">
            <summary>
            Returns the QuestionResponse entity for a given QuestionResponse.
            </summary>
            <param name="reqId">Request ID.</param>
            <param name="qrId">QuestionResponse ID.</param>
            <returns>Specified QuestionResponse entity, or null if does not
            exist.</returns>
        </member>
        <member name="M:SasquatchCAIRS.Controllers.ServiceSystem.RequestManagementController.getKeywordQuestionEntity(System.Int32,System.Int64,System.Int64)">
            <summary>
            Returns the KeywordQuestion entity for a given Keyword and
            QuestionResponse.
            </summary>
            <param name="kwId">Keyword ID.</param>
            <param name="reqId">Request ID.</param>
            <param name="qrId">QuestionResponse ID.</param>
            <returns>Specified KeywordQuestion entity, or null if does
            not exist.</returns>
        </member>
        <member name="M:SasquatchCAIRS.Controllers.ServiceSystem.RequestManagementController.getReferenceEntity(System.Int64,System.Int64,System.Int64)">
            <summary>
            Returns the Reference entity for a given Reference and 
            QuestionResponse.
            </summary>
            <param name="refId">Reference ID.</param>
            <param name="reqId">Request ID.</param>
            <param name="qrId">QuestionResponse ID.</param>
            <returns>Specific Reference entity, or null if does not exist.
            </returns>
        </member>
        <member name="M:SasquatchCAIRS.Controllers.ServiceSystem.RequestManagementController.invalidate(System.Int64)">
            <summary>
            Mark a request with the given request ID as invalid in the database.
            </summary>
            <param name="requestId">Request ID.</param>
        </member>
        <member name="M:SasquatchCAIRS.Controllers.ServiceSystem.RequestManagementController.requestExists(System.Int64)">
            <summary>
            Checks if a request ID exists in the database.
            </summary>
            <param name="requestId">Unique ID for a request.</param>
            <returns>True if a request exists with the specified ID,
            false otherwise.</returns>
        </member>
        <member name="M:SasquatchCAIRS.CAIRSDataContext.Repository``1">
            <summary>
            Gets the repository for the given type of entities
            </summary>
            <typeparam name="T">The type of the entity</typeparam>
            <returns>The repository of the given type</returns>
        </member>
        <member name="M:SasquatchCAIRS.CAIRSDataContext.insert``1(``0)">
            <summary>
            Adds a new entity to the repository
            </summary>
            <typeparam name="T">The type of the entity</typeparam>
            <param name="item">The entity to add</param>
        </member>
        <member name="M:SasquatchCAIRS.CAIRSDataContext.delete``1(``0)">
            <summary>
            Deletes the specified entity from the repository
            </summary>
            <typeparam name="T">The type of the entity</typeparam>
            <param name="item">The entity to delete</param>
        </member>
        <member name="M:SasquatchCAIRS.CAIRSDataContext.submitChanges">
            <summary>
            Submits the changes.
            </summary>
        </member>
    </members>
</doc>
