using System;
using System.Collections;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using System.Data;
using System.Web.Mvc;
using DocumentFormat.OpenXml.Packaging;
using DocumentFormat.OpenXml.Spreadsheet;

namespace SasquatchCAIRS.Controllers
{
    public class ExcelExportController : Controller
    {
        //Basic Code from OpenXML tutorial: http://lateral8.com/articles/2010/3/5/openxml-sdk-20-export-a-datatable-to-excel.aspx
        //Customized to create data in more than one excel sheet
        #region Public Methods

        //Parameters: exportFile - the System file path chosen by th user
        public void ExportReportDataTable(
            List<DataTable> tableList,
            string exportFilePath) {
           
            //create the empty spreadsheet template and save the file
            //using the class generated by the Productivity tool
            //ExcelDocument excelDocument = new ExcelDocument();
            //excelDocument.CreatePackage(exportFile);

            //Instead of creating a new excel file, lets use the template and make a copy to work with.
                System.IO.File.Copy("ReportTemplate.xlsx", exportFilePath, true);

            //populate the data into the spreadsheet
            using (SpreadsheetDocument spreadsheet =
                SpreadsheetDocument.Open(exportFilePath, true)) {
                WorkbookPart workbook = spreadsheet.WorkbookPart;

                IEnumerable<WorksheetPart> sheets = workbook.GetPartsOfType<WorksheetPart>();
                IEnumerator<WorksheetPart> enumerator = sheets.GetEnumerator();

                DataTable table;
                SheetData data;

                int i = 0;
                bool movedNext = true;
                while (i < tableList.Count() && movedNext)
                {
                    table = tableList.ElementAt(i);
                    data = enumerator.Current.Worksheet.GetFirstChild<SheetData>();
                    //add column names to the first row
                    Row header = new Row();
                    header.RowIndex = (UInt32) 1;

                    foreach (DataColumn column in table.Columns) {
                        Cell headerCell = createTextCell(
                            table.Columns.IndexOf(column) + 1,
                            1,
                            column.ColumnName);

                        header.AppendChild(headerCell);
                    }
                    data.AppendChild(header);

                    //loop through each data row
                    DataRow contentRow;
                    for (int j = 0; j < table.Rows.Count; j++) {
                        contentRow = table.Rows[j];
                        data.AppendChild(createContentRow(contentRow, j + 2));
                    }

                    //Move to the next worksheetPart.
                    movedNext = enumerator.MoveNext();
                    i++;
                }

            }
        }

        //Creates an audit log xlsx file
        //Parameters: exportFile - the System file path chosen by th user
        public void ExportAuditLogTable(
            DataTable table,
            string exportFilePath) {
            //Instead of creating a new excel file, lets use the template and make a copy to work with.
                System.IO.File.Copy("AuditLogTemplate.xlsx", exportFilePath, true);

            //populate the data into the spreadsheet
            using (SpreadsheetDocument spreadsheet =
                SpreadsheetDocument.Open(exportFilePath, true)) {
                WorkbookPart workbook = spreadsheet.WorkbookPart;
                //create a reference to Sheet1
                WorksheetPart worksheet = workbook.WorksheetParts.Last();
                SheetData data = worksheet.Worksheet.GetFirstChild<SheetData>();

                //add column names to the first row
                Row header = new Row();
                header.RowIndex = (UInt32) 1;

                foreach (DataColumn column in table.Columns) {
                    Cell headerCell = createTextCell(
                        table.Columns.IndexOf(column) + 1,
                        1,
                        column.ColumnName);

                    header.AppendChild(headerCell);
                }
                data.AppendChild(header);

                //loop through each data row
                DataRow contentRow;
                for (int i = 0; i < table.Rows.Count; i++) {
                    contentRow = table.Rows[i];
                    data.AppendChild(createContentRow(contentRow, i + 2));
                }
            }
        }

        #endregion

        #region WorkBook Methods

        /// <summary>
        /// Gets the Excel column name based on a supplied index number.
        /// </summary>
        /// <returns>1 = A, 2 = B... 27 = AA, etc.</returns>
        private string getColumnName(int columnIndex) {
            int dividend = columnIndex;
            string columnName = String.Empty;
            int modifier;

            while (dividend > 0) {
                modifier = (dividend - 1) % 26;
                columnName =
                    Convert.ToChar(65 + modifier).ToString() + columnName;
                dividend = (int) ((dividend - modifier) / 26);
            }

            return columnName;
        }

        private Cell createTextCell(
            int columnIndex,
            int rowIndex,
            object cellValue) {
            Cell cell = new Cell();

            cell.DataType = CellValues.InlineString;
            cell.CellReference = getColumnName(columnIndex) + rowIndex;

            InlineString inlineString = new InlineString();
            Text t = new Text();

            t.Text = cellValue.ToString();
            inlineString.AppendChild(t);
            cell.AppendChild(inlineString);

            return cell;
        }

        private Row createContentRow(
            DataRow dataRow,
            int rowIndex) {
            Row row = new Row {
                RowIndex = (UInt32) rowIndex
            };

            for (int i = 0; i < dataRow.Table.Columns.Count; i++) {
                Cell dataCell = createTextCell(i + 1, rowIndex, dataRow[i]);
                row.AppendChild(dataCell);
            }
            return row;
        }

        #endregion

    }
}
