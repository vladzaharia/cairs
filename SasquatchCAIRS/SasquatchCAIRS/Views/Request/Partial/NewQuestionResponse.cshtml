@using SasquatchCAIRS.Helper
@using SasquatchCAIRS.Models

@model SasquatchCAIRS.Models.ServiceSystem.QuestionResponseContent

@{
    Layout = null;
}

<div id="qr-@(ViewBag.Guid)">
    @using (Html.BeginCollectionItemFromIndex("questionResponseList", (String) ViewBag.Guid)) {
        <table>
            <tr>
                <td>
                    @Html.LabelFor(model => model.question)
                </td>
                <td>
                    @Html.TextAreaFor(model => model.question)
                </td>
            </tr>
            <tr>
                <td>
                    @Html.LabelFor(model => model.response)
                </td>
                <td>
                    @Html.TextAreaFor(model => model.response)
                </td>
            </tr>
            <tr>
                <td>
                    @Html.LabelFor(model => model.specialNotes)
                </td>
                <td>
                    @Html.TextAreaFor(model => model.specialNotes)
                </td>
            </tr>
        </table>
        <table>
            <tr>
                <td>
                    @Html.LabelFor(model => model.questionTypeID)
                </td>
                <td>
                    @Html.DropDownListFor(model => model.questionTypeID,
                                          (SelectList) ViewBag.QuestionTypes, "")
                </td>
                <td>
                    @Html.LabelFor(model => model.tumourGroupID)
                </td>
                <td>
                    @Html.DropDownListFor(model => model.tumourGroupID,
                                          (SelectList) ViewBag.TumourGroups, "")
                </td>
            </tr>
            <tr>
                <td>
                    @Html.LabelFor(model => model.timeSpent)
                </td>
                <td>
                    <div class="input-append">
                        @Html.TextBoxFor(model => model.timeSpent)
                        <span class="add-on textbox-add-on">min</span>
                    </div>
                </td>
            </tr>
        </table>
        
        @Html.LabelFor(model => model.referenceList)
        <table id="qr-references-@(ViewBag.Guid)">
        </table>

        <a href="#" class="btn btn-success btn-small" id="qr-references-add-@(ViewBag.Guid)">
            <i class="icon-plus"></i>
            &nbsp;@Constants.UIString.ButtonText.ADD_REFERENCE
        </a>
        
        <table>
            <tr>
                <td>@Html.LabelFor(model => model.keywords)</td>
                <td>
                    <input id="qr-keywords-@(ViewBag.Guid)" type="text"
                           data-provide="typeahead" autocomplete="off"/>
                    <div id="qr-keyword-list-@(ViewBag.Guid)"></div>
                </td>
            </tr>
        </table>
        
        <a href="#" data-toggle="modal" class="btn btn-danger btn-small del-question" id="qr-delete-@(ViewBag.Guid)">
            <i class="icon-remove"></i>
            &nbsp;@Constants.UIString.ButtonText.DELETE_QUESTION
        </a>
    }

    <script type="text/javascript">
        $(function () {
            $("#qr-references-add-@(ViewBag.Guid)").click(function (e) {
                e.preventDefault();

                $.get("@Url.Action("NewReference", "Request")/@(ViewBag.Guid)", function (r) {
                    $("#qr-references-@(ViewBag.Guid)").append(r);
                    $("#qr-references-@(ViewBag.Guid) .del-ref").attr("disabled", false);
                    $("#qr-references-@(ViewBag.Guid) .del-ref").attr("href", "#warning_modal");
                });
            });
            
            $("#qr-delete-@(ViewBag.Guid)").click(function (e) {
                e.preventDefault();

                $("#warning_modal_text").text("@Constants.UIString.Messages.DELETE_QUESTION_WARNING");
                $("#warning_modal_yes_btn").unbind().click(function () {
                    return deleteQuestion("@(ViewBag.Guid)");
                });
            });

            $("#qr-keywords-@(ViewBag.Guid)").typeahead({
                source: function (query, process) {
                    var last = query.split(/\s*[,;]\s*/).pop();

                    $.post("@Url.Action("GetMatchingKeywords", "Request")/" + last, function (data) {
                        process(data);
                    });
                },
                updater: function (item) {
                    var terms = this.query.split(/\s*[,;]\s*/);
                    terms.pop();
                    terms.push(item);
                    terms.push("");

                    return terms.join(", ");
                },
                matcher: function (item) {
                    return (this.query).split(/\s*[,;]\s*/).pop().length > 0;
                },
                highlighter: function (item) {
                    var query = this.query.split(/\s*[,;]\s*/).pop().replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g, '\\$&');
                    return item.replace(new RegExp('(' + query + ')', 'ig'), function ($1, match) {
                        return '<strong>' + match + '</strong>';
                    });
                }
            }).change(function () {
                $("#qr-keyword-list-@(ViewBag.Guid)").empty();

                var terms = $(this).val().split(/\s*[,;]\s*/);
                if (terms[terms.length - 1] == "") {
                    terms.pop();
                }

                for (var i = 0; i < terms.length; i++) {
                    $("#qr-keyword-list-@(ViewBag.Guid)").append(
                        '<input type="hidden" id="questionResponseList_@(ViewBag.Guid)__keywords_' + i + '"' +
                            'name="questionResponseList[@(ViewBag.Guid)].keywords[' + i + ']"' +
                            'value="' + terms[i] + '">');
                }
            });
        });
    </script>
</div>

