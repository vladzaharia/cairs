#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18033
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SasquatchCAIRS
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;

    public interface IDataContext {
        IQueryable<T> Repository<T>() where T : class;
    }
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="sasquatch")]
	public partial class CAIRSDataContext : System.Data.Linq.DataContext, IDataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertReference(Reference instance);
    partial void UpdateReference(Reference instance);
    partial void DeleteReference(Reference instance);
    partial void InsertQuestionType(QuestionType instance);
    partial void UpdateQuestionType(QuestionType instance);
    partial void DeleteQuestionType(QuestionType instance);
    partial void InsertRegion(Region instance);
    partial void UpdateRegion(Region instance);
    partial void DeleteRegion(Region instance);
    partial void InsertRequestorType(RequestorType instance);
    partial void UpdateRequestorType(RequestorType instance);
    partial void DeleteRequestorType(RequestorType instance);
    partial void InsertTumourGroup(TumourGroup instance);
    partial void UpdateTumourGroup(TumourGroup instance);
    partial void DeleteTumourGroup(TumourGroup instance);
    partial void InsertUserGroup(UserGroup instance);
    partial void UpdateUserGroup(UserGroup instance);
    partial void DeleteUserGroup(UserGroup instance);
    partial void InsertQuestionResponse(QuestionResponse instance);
    partial void UpdateQuestionResponse(QuestionResponse instance);
    partial void DeleteQuestionResponse(QuestionResponse instance);
    partial void InsertRequestLock(RequestLock instance);
    partial void UpdateRequestLock(RequestLock instance);
    partial void DeleteRequestLock(RequestLock instance);
    partial void InsertUserProfile(UserProfile instance);
    partial void UpdateUserProfile(UserProfile instance);
    partial void DeleteUserProfile(UserProfile instance);
    partial void InsertUserGroups(UserGroups instance);
    partial void UpdateUserGroups(UserGroups instance);
    partial void DeleteUserGroups(UserGroups instance);
    partial void InsertKeywordQuestion(KeywordQuestion instance);
    partial void UpdateKeywordQuestion(KeywordQuestion instance);
    partial void DeleteKeywordQuestion(KeywordQuestion instance);
    partial void InsertAuditLog(AuditLog instance);
    partial void UpdateAuditLog(AuditLog instance);
    partial void DeleteAuditLog(AuditLog instance);
    partial void InsertRequest(Request instance);
    partial void UpdateRequest(Request instance);
    partial void DeleteRequest(Request instance);
    partial void InsertKeyword(Keyword instance);
    partial void UpdateKeyword(Keyword instance);
    partial void DeleteKeyword(Keyword instance);
    #endregion

        /// <summary>
        /// Gets the repository for the given type of entities
        /// </summary>
        /// <typeparam name="T">The type of the entity</typeparam>
        /// <returns>The repository of the given type</returns>
        public IQueryable<T> Repository<T>() where T : class {
            Table<T> table = this.GetTable<T>();
            return table;
        }
		
		public CAIRSDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["sasquatchConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public CAIRSDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CAIRSDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CAIRSDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CAIRSDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Reference> References
		{
			get
			{
				return this.GetTable<Reference>();
			}
		}
		
		public System.Data.Linq.Table<QuestionType> QuestionTypes
		{
			get
			{
				return this.GetTable<QuestionType>();
			}
		}
		
		public System.Data.Linq.Table<Region> Regions
		{
			get
			{
				return this.GetTable<Region>();
			}
		}
		
		public System.Data.Linq.Table<RequestorType> RequestorTypes
		{
			get
			{
				return this.GetTable<RequestorType>();
			}
		}
		
		public System.Data.Linq.Table<TumourGroup> TumourGroups
		{
			get
			{
				return this.GetTable<TumourGroup>();
			}
		}
		
		public System.Data.Linq.Table<UserGroup> UserGroups
		{
			get
			{
				return this.GetTable<UserGroup>();
			}
		}
		
		public System.Data.Linq.Table<QuestionResponse> QuestionResponses
		{
			get
			{
				return this.GetTable<QuestionResponse>();
			}
		}
		
		public System.Data.Linq.Table<RequestLock> RequestLocks
		{
			get
			{
				return this.GetTable<RequestLock>();
			}
		}
		
		public System.Data.Linq.Table<UserProfile> UserProfiles
		{
			get
			{
				return this.GetTable<UserProfile>();
			}
		}
		
		public System.Data.Linq.Table<UserGroups> UserGroups1
		{
			get
			{
				return this.GetTable<UserGroups>();
			}
		}
		
		public System.Data.Linq.Table<KeywordQuestion> KeywordQuestions
		{
			get
			{
				return this.GetTable<KeywordQuestion>();
			}
		}
		
		public System.Data.Linq.Table<AuditLog> AuditLogs
		{
			get
			{
				return this.GetTable<AuditLog>();
			}
		}
		
		public System.Data.Linq.Table<Request> Requests
		{
			get
			{
				return this.GetTable<Request>();
			}
		}
		
		public System.Data.Linq.Table<Keyword> Keywords
		{
			get
			{
				return this.GetTable<Keyword>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Reference")]
	public partial class Reference : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ReferenceID;
		
		private long _QuestionResponseID;
		
		private long _RequestID;
		
		private byte _ReferenceType;
		
		private string _ReferenceString;
		
		private EntityRef<QuestionResponse> _QuestionResponse;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnReferenceIDChanging(long value);
    partial void OnReferenceIDChanged();
    partial void OnQuestionResponseIDChanging(long value);
    partial void OnQuestionResponseIDChanged();
    partial void OnRequestIDChanging(long value);
    partial void OnRequestIDChanged();
    partial void OnReferenceTypeChanging(byte value);
    partial void OnReferenceTypeChanged();
    partial void OnReferenceStringChanging(string value);
    partial void OnReferenceStringChanged();
    #endregion
		
		public Reference()
		{
			this._QuestionResponse = default(EntityRef<QuestionResponse>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReferenceID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ReferenceID
		{
			get
			{
				return this._ReferenceID;
			}
			set
			{
				if ((this._ReferenceID != value))
				{
					this.OnReferenceIDChanging(value);
					this.SendPropertyChanging();
					this._ReferenceID = value;
					this.SendPropertyChanged("ReferenceID");
					this.OnReferenceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuestionResponseID", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long QuestionResponseID
		{
			get
			{
				return this._QuestionResponseID;
			}
			set
			{
				if ((this._QuestionResponseID != value))
				{
					if (this._QuestionResponse.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnQuestionResponseIDChanging(value);
					this.SendPropertyChanging();
					this._QuestionResponseID = value;
					this.SendPropertyChanged("QuestionResponseID");
					this.OnQuestionResponseIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RequestID", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long RequestID
		{
			get
			{
				return this._RequestID;
			}
			set
			{
				if ((this._RequestID != value))
				{
					if (this._QuestionResponse.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRequestIDChanging(value);
					this.SendPropertyChanging();
					this._RequestID = value;
					this.SendPropertyChanged("RequestID");
					this.OnRequestIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReferenceType", DbType="TinyInt NOT NULL")]
		public byte ReferenceType
		{
			get
			{
				return this._ReferenceType;
			}
			set
			{
				if ((this._ReferenceType != value))
				{
					this.OnReferenceTypeChanging(value);
					this.SendPropertyChanging();
					this._ReferenceType = value;
					this.SendPropertyChanged("ReferenceType");
					this.OnReferenceTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReferenceString", DbType="NVarChar(1024) NOT NULL", CanBeNull=false)]
		public string ReferenceString
		{
			get
			{
				return this._ReferenceString;
			}
			set
			{
				if ((this._ReferenceString != value))
				{
					this.OnReferenceStringChanging(value);
					this.SendPropertyChanging();
					this._ReferenceString = value;
					this.SendPropertyChanged("ReferenceString");
					this.OnReferenceStringChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="QuestionResponse_Reference", Storage="_QuestionResponse", ThisKey="QuestionResponseID,RequestID", OtherKey="QuestionResponseID,RequestID", IsForeignKey=true)]
		public QuestionResponse QuestionResponse
		{
			get
			{
				return this._QuestionResponse.Entity;
			}
			set
			{
				QuestionResponse previousValue = this._QuestionResponse.Entity;
				if (((previousValue != value) 
							|| (this._QuestionResponse.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._QuestionResponse.Entity = null;
						previousValue.References.Remove(this);
					}
					this._QuestionResponse.Entity = value;
					if ((value != null))
					{
						value.References.Add(this);
						this._QuestionResponseID = value.QuestionResponseID;
						this._RequestID = value.RequestID;
					}
					else
					{
						this._QuestionResponseID = default(long);
						this._RequestID = default(long);
					}
					this.SendPropertyChanged("QuestionResponse");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.QuestionType")]
	public partial class QuestionType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _QuestionTypeID;
		
		private string _Value;
		
		private string _Code;
		
		private bool _Active;
		
		private EntitySet<QuestionResponse> _QuestionResponses;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnQuestionTypeIDChanging(int value);
    partial void OnQuestionTypeIDChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    #endregion
		
		public QuestionType()
		{
			this._QuestionResponses = new EntitySet<QuestionResponse>(new Action<QuestionResponse>(this.attach_QuestionResponses), new Action<QuestionResponse>(this.detach_QuestionResponses));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuestionTypeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int QuestionTypeID
		{
			get
			{
				return this._QuestionTypeID;
			}
			set
			{
				if ((this._QuestionTypeID != value))
				{
					this.OnQuestionTypeIDChanging(value);
					this.SendPropertyChanging();
					this._QuestionTypeID = value;
					this.SendPropertyChanged("QuestionTypeID");
					this.OnQuestionTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="NVarChar(64) NOT NULL", CanBeNull=false)]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="Char(10) NOT NULL", CanBeNull=false)]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="QuestionType_QuestionResponse", Storage="_QuestionResponses", ThisKey="QuestionTypeID", OtherKey="QuestionTypeID")]
		public EntitySet<QuestionResponse> QuestionResponses
		{
			get
			{
				return this._QuestionResponses;
			}
			set
			{
				this._QuestionResponses.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_QuestionResponses(QuestionResponse entity)
		{
			this.SendPropertyChanging();
			entity.QuestionType = this;
		}
		
		private void detach_QuestionResponses(QuestionResponse entity)
		{
			this.SendPropertyChanging();
			entity.QuestionType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Region")]
	public partial class Region : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RegionID;
		
		private string _Value;
		
		private string _Code;
		
		private bool _Active;
		
		private EntitySet<Request> _Requests;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRegionIDChanging(int value);
    partial void OnRegionIDChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    #endregion
		
		public Region()
		{
			this._Requests = new EntitySet<Request>(new Action<Request>(this.attach_Requests), new Action<Request>(this.detach_Requests));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RegionID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RegionID
		{
			get
			{
				return this._RegionID;
			}
			set
			{
				if ((this._RegionID != value))
				{
					this.OnRegionIDChanging(value);
					this.SendPropertyChanging();
					this._RegionID = value;
					this.SendPropertyChanged("RegionID");
					this.OnRegionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="NVarChar(64) NOT NULL", CanBeNull=false)]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="Char(10) NOT NULL", CanBeNull=false)]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Region_Request", Storage="_Requests", ThisKey="RegionID", OtherKey="RegionID")]
		public EntitySet<Request> Requests
		{
			get
			{
				return this._Requests;
			}
			set
			{
				this._Requests.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Requests(Request entity)
		{
			this.SendPropertyChanging();
			entity.Region = this;
		}
		
		private void detach_Requests(Request entity)
		{
			this.SendPropertyChanging();
			entity.Region = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RequestorType")]
	public partial class RequestorType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RequestorTypeID;
		
		private string _Value;
		
		private string _Code;
		
		private bool _Active;
		
		private EntitySet<Request> _Requests;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRequestorTypeIDChanging(int value);
    partial void OnRequestorTypeIDChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    #endregion
		
		public RequestorType()
		{
			this._Requests = new EntitySet<Request>(new Action<Request>(this.attach_Requests), new Action<Request>(this.detach_Requests));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RequestorTypeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RequestorTypeID
		{
			get
			{
				return this._RequestorTypeID;
			}
			set
			{
				if ((this._RequestorTypeID != value))
				{
					this.OnRequestorTypeIDChanging(value);
					this.SendPropertyChanging();
					this._RequestorTypeID = value;
					this.SendPropertyChanged("RequestorTypeID");
					this.OnRequestorTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="NVarChar(64) NOT NULL", CanBeNull=false)]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="Char(10) NOT NULL", CanBeNull=false)]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RequestorType_Request", Storage="_Requests", ThisKey="RequestorTypeID", OtherKey="RequestorTypeID")]
		public EntitySet<Request> Requests
		{
			get
			{
				return this._Requests;
			}
			set
			{
				this._Requests.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Requests(Request entity)
		{
			this.SendPropertyChanging();
			entity.RequestorType = this;
		}
		
		private void detach_Requests(Request entity)
		{
			this.SendPropertyChanging();
			entity.RequestorType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TumourGroup")]
	public partial class TumourGroup : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TumourGroupID;
		
		private string _Value;
		
		private string _Code;
		
		private bool _Active;
		
		private EntitySet<QuestionResponse> _QuestionResponses;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTumourGroupIDChanging(int value);
    partial void OnTumourGroupIDChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    #endregion
		
		public TumourGroup()
		{
			this._QuestionResponses = new EntitySet<QuestionResponse>(new Action<QuestionResponse>(this.attach_QuestionResponses), new Action<QuestionResponse>(this.detach_QuestionResponses));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TumourGroupID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TumourGroupID
		{
			get
			{
				return this._TumourGroupID;
			}
			set
			{
				if ((this._TumourGroupID != value))
				{
					this.OnTumourGroupIDChanging(value);
					this.SendPropertyChanging();
					this._TumourGroupID = value;
					this.SendPropertyChanged("TumourGroupID");
					this.OnTumourGroupIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="NVarChar(64) NOT NULL", CanBeNull=false)]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="Char(10) NOT NULL", CanBeNull=false)]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TumourGroup_QuestionResponse", Storage="_QuestionResponses", ThisKey="TumourGroupID", OtherKey="TumourGroupID")]
		public EntitySet<QuestionResponse> QuestionResponses
		{
			get
			{
				return this._QuestionResponses;
			}
			set
			{
				this._QuestionResponses.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_QuestionResponses(QuestionResponse entity)
		{
			this.SendPropertyChanging();
			entity.TumourGroup = this;
		}
		
		private void detach_QuestionResponses(QuestionResponse entity)
		{
			this.SendPropertyChanging();
			entity.TumourGroup = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserGroup")]
	public partial class UserGroup : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _GroupID;
		
		private string _Value;
		
		private string _Code;
		
		private bool _Active;
		
		private EntitySet<UserGroups> _UserGroups;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGroupIDChanging(int value);
    partial void OnGroupIDChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    #endregion
		
		public UserGroup()
		{
			this._UserGroups = new EntitySet<UserGroups>(new Action<UserGroups>(this.attach_UserGroups), new Action<UserGroups>(this.detach_UserGroups));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int GroupID
		{
			get
			{
				return this._GroupID;
			}
			set
			{
				if ((this._GroupID != value))
				{
					this.OnGroupIDChanging(value);
					this.SendPropertyChanging();
					this._GroupID = value;
					this.SendPropertyChanged("GroupID");
					this.OnGroupIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="NVarChar(64) NOT NULL", CanBeNull=false)]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="Char(10) NOT NULL", CanBeNull=false)]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserGroup_UserGroups", Storage="_UserGroups", ThisKey="GroupID", OtherKey="GroupID")]
		public EntitySet<UserGroups> UserGroups
		{
			get
			{
				return this._UserGroups;
			}
			set
			{
				this._UserGroups.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserGroups(UserGroups entity)
		{
			this.SendPropertyChanging();
			entity.UserGroup = this;
		}
		
		private void detach_UserGroups(UserGroups entity)
		{
			this.SendPropertyChanging();
			entity.UserGroup = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.QuestionResponse")]
	public partial class QuestionResponse : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _QuestionResponseID;
		
		private long _RequestID;
		
		private string _Question;
		
		private string _Response;
		
		private System.Nullable<short> _TimeSpent;
		
		private string _SpecialNotes;
		
		private System.Nullable<int> _QuestionTypeID;
		
		private System.Nullable<int> _TumourGroupID;
		
		private System.Nullable<byte> _Severity;
		
		private System.Nullable<byte> _Consequence;
		
		private EntitySet<Reference> _References;
		
		private EntitySet<KeywordQuestion> _KeywordQuestions;
		
		private EntityRef<QuestionType> _QuestionType;
		
		private EntityRef<TumourGroup> _TumourGroup;
		
		private EntityRef<Request> _Request;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnQuestionResponseIDChanging(long value);
    partial void OnQuestionResponseIDChanged();
    partial void OnRequestIDChanging(long value);
    partial void OnRequestIDChanged();
    partial void OnQuestionChanging(string value);
    partial void OnQuestionChanged();
    partial void OnResponseChanging(string value);
    partial void OnResponseChanged();
    partial void OnTimeSpentChanging(System.Nullable<short> value);
    partial void OnTimeSpentChanged();
    partial void OnSpecialNotesChanging(string value);
    partial void OnSpecialNotesChanged();
    partial void OnQuestionTypeIDChanging(System.Nullable<int> value);
    partial void OnQuestionTypeIDChanged();
    partial void OnTumourGroupIDChanging(System.Nullable<int> value);
    partial void OnTumourGroupIDChanged();
    partial void OnSeverityChanging(System.Nullable<byte> value);
    partial void OnSeverityChanged();
    partial void OnConsequenceChanging(System.Nullable<byte> value);
    partial void OnConsequenceChanged();
    #endregion
		
		public QuestionResponse()
		{
			this._References = new EntitySet<Reference>(new Action<Reference>(this.attach_References), new Action<Reference>(this.detach_References));
			this._KeywordQuestions = new EntitySet<KeywordQuestion>(new Action<KeywordQuestion>(this.attach_KeywordQuestions), new Action<KeywordQuestion>(this.detach_KeywordQuestions));
			this._QuestionType = default(EntityRef<QuestionType>);
			this._TumourGroup = default(EntityRef<TumourGroup>);
			this._Request = default(EntityRef<Request>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuestionResponseID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long QuestionResponseID
		{
			get
			{
				return this._QuestionResponseID;
			}
			set
			{
				if ((this._QuestionResponseID != value))
				{
					this.OnQuestionResponseIDChanging(value);
					this.SendPropertyChanging();
					this._QuestionResponseID = value;
					this.SendPropertyChanged("QuestionResponseID");
					this.OnQuestionResponseIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RequestID", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long RequestID
		{
			get
			{
				return this._RequestID;
			}
			set
			{
				if ((this._RequestID != value))
				{
					if (this._Request.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRequestIDChanging(value);
					this.SendPropertyChanging();
					this._RequestID = value;
					this.SendPropertyChanged("RequestID");
					this.OnRequestIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Question", DbType="NVarChar(1024)")]
		public string Question
		{
			get
			{
				return this._Question;
			}
			set
			{
				if ((this._Question != value))
				{
					this.OnQuestionChanging(value);
					this.SendPropertyChanging();
					this._Question = value;
					this.SendPropertyChanged("Question");
					this.OnQuestionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Response", DbType="NVarChar(MAX)")]
		public string Response
		{
			get
			{
				return this._Response;
			}
			set
			{
				if ((this._Response != value))
				{
					this.OnResponseChanging(value);
					this.SendPropertyChanging();
					this._Response = value;
					this.SendPropertyChanged("Response");
					this.OnResponseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeSpent", DbType="SmallInt")]
		public System.Nullable<short> TimeSpent
		{
			get
			{
				return this._TimeSpent;
			}
			set
			{
				if ((this._TimeSpent != value))
				{
					this.OnTimeSpentChanging(value);
					this.SendPropertyChanging();
					this._TimeSpent = value;
					this.SendPropertyChanged("TimeSpent");
					this.OnTimeSpentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SpecialNotes", DbType="NVarChar(1024)")]
		public string SpecialNotes
		{
			get
			{
				return this._SpecialNotes;
			}
			set
			{
				if ((this._SpecialNotes != value))
				{
					this.OnSpecialNotesChanging(value);
					this.SendPropertyChanging();
					this._SpecialNotes = value;
					this.SendPropertyChanged("SpecialNotes");
					this.OnSpecialNotesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuestionTypeID", DbType="Int")]
		public System.Nullable<int> QuestionTypeID
		{
			get
			{
				return this._QuestionTypeID;
			}
			set
			{
				if ((this._QuestionTypeID != value))
				{
					if (this._QuestionType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnQuestionTypeIDChanging(value);
					this.SendPropertyChanging();
					this._QuestionTypeID = value;
					this.SendPropertyChanged("QuestionTypeID");
					this.OnQuestionTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TumourGroupID", DbType="Int")]
		public System.Nullable<int> TumourGroupID
		{
			get
			{
				return this._TumourGroupID;
			}
			set
			{
				if ((this._TumourGroupID != value))
				{
					if (this._TumourGroup.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTumourGroupIDChanging(value);
					this.SendPropertyChanging();
					this._TumourGroupID = value;
					this.SendPropertyChanged("TumourGroupID");
					this.OnTumourGroupIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Severity", DbType="TinyInt")]
		public System.Nullable<byte> Severity
		{
			get
			{
				return this._Severity;
			}
			set
			{
				if ((this._Severity != value))
				{
					this.OnSeverityChanging(value);
					this.SendPropertyChanging();
					this._Severity = value;
					this.SendPropertyChanged("Severity");
					this.OnSeverityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Consequence", DbType="TinyInt")]
		public System.Nullable<byte> Consequence
		{
			get
			{
				return this._Consequence;
			}
			set
			{
				if ((this._Consequence != value))
				{
					this.OnConsequenceChanging(value);
					this.SendPropertyChanging();
					this._Consequence = value;
					this.SendPropertyChanged("Consequence");
					this.OnConsequenceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="QuestionResponse_Reference", Storage="_References", ThisKey="QuestionResponseID,RequestID", OtherKey="QuestionResponseID,RequestID")]
		public EntitySet<Reference> References
		{
			get
			{
				return this._References;
			}
			set
			{
				this._References.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="QuestionResponse_KeywordQuestion", Storage="_KeywordQuestions", ThisKey="QuestionResponseID,RequestID", OtherKey="QuestionResponseID,RequestID")]
		public EntitySet<KeywordQuestion> KeywordQuestions
		{
			get
			{
				return this._KeywordQuestions;
			}
			set
			{
				this._KeywordQuestions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="QuestionType_QuestionResponse", Storage="_QuestionType", ThisKey="QuestionTypeID", OtherKey="QuestionTypeID", IsForeignKey=true)]
		public QuestionType QuestionType
		{
			get
			{
				return this._QuestionType.Entity;
			}
			set
			{
				QuestionType previousValue = this._QuestionType.Entity;
				if (((previousValue != value) 
							|| (this._QuestionType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._QuestionType.Entity = null;
						previousValue.QuestionResponses.Remove(this);
					}
					this._QuestionType.Entity = value;
					if ((value != null))
					{
						value.QuestionResponses.Add(this);
						this._QuestionTypeID = value.QuestionTypeID;
					}
					else
					{
						this._QuestionTypeID = default(Nullable<int>);
					}
					this.SendPropertyChanged("QuestionType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TumourGroup_QuestionResponse", Storage="_TumourGroup", ThisKey="TumourGroupID", OtherKey="TumourGroupID", IsForeignKey=true)]
		public TumourGroup TumourGroup
		{
			get
			{
				return this._TumourGroup.Entity;
			}
			set
			{
				TumourGroup previousValue = this._TumourGroup.Entity;
				if (((previousValue != value) 
							|| (this._TumourGroup.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TumourGroup.Entity = null;
						previousValue.QuestionResponses.Remove(this);
					}
					this._TumourGroup.Entity = value;
					if ((value != null))
					{
						value.QuestionResponses.Add(this);
						this._TumourGroupID = value.TumourGroupID;
					}
					else
					{
						this._TumourGroupID = default(Nullable<int>);
					}
					this.SendPropertyChanged("TumourGroup");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Request_QuestionResponse", Storage="_Request", ThisKey="RequestID", OtherKey="RequestID", IsForeignKey=true)]
		public Request Request
		{
			get
			{
				return this._Request.Entity;
			}
			set
			{
				Request previousValue = this._Request.Entity;
				if (((previousValue != value) 
							|| (this._Request.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Request.Entity = null;
						previousValue.QuestionResponses.Remove(this);
					}
					this._Request.Entity = value;
					if ((value != null))
					{
						value.QuestionResponses.Add(this);
						this._RequestID = value.RequestID;
					}
					else
					{
						this._RequestID = default(long);
					}
					this.SendPropertyChanged("Request");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_References(Reference entity)
		{
			this.SendPropertyChanging();
			entity.QuestionResponse = this;
		}
		
		private void detach_References(Reference entity)
		{
			this.SendPropertyChanging();
			entity.QuestionResponse = null;
		}
		
		private void attach_KeywordQuestions(KeywordQuestion entity)
		{
			this.SendPropertyChanging();
			entity.QuestionResponse = this;
		}
		
		private void detach_KeywordQuestions(KeywordQuestion entity)
		{
			this.SendPropertyChanging();
			entity.QuestionResponse = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RequestLock")]
	public partial class RequestLock : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _RequestID;
		
		private int _UserID;
		
		private System.DateTime _StartTime;
		
		private EntityRef<UserProfile> _UserProfile;
		
		private EntityRef<Request> _Request;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRequestIDChanging(long value);
    partial void OnRequestIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnStartTimeChanging(System.DateTime value);
    partial void OnStartTimeChanged();
    #endregion
		
		public RequestLock()
		{
			this._UserProfile = default(EntityRef<UserProfile>);
			this._Request = default(EntityRef<Request>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RequestID", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long RequestID
		{
			get
			{
				return this._RequestID;
			}
			set
			{
				if ((this._RequestID != value))
				{
					if (this._Request.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRequestIDChanging(value);
					this.SendPropertyChanging();
					this._RequestID = value;
					this.SendPropertyChanged("RequestID");
					this.OnRequestIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._UserProfile.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartTime", DbType="DateTime NOT NULL")]
		public System.DateTime StartTime
		{
			get
			{
				return this._StartTime;
			}
			set
			{
				if ((this._StartTime != value))
				{
					this.OnStartTimeChanging(value);
					this.SendPropertyChanging();
					this._StartTime = value;
					this.SendPropertyChanged("StartTime");
					this.OnStartTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserProfile_RequestLock", Storage="_UserProfile", ThisKey="UserID", OtherKey="UserId", IsForeignKey=true)]
		public UserProfile UserProfile
		{
			get
			{
				return this._UserProfile.Entity;
			}
			set
			{
				UserProfile previousValue = this._UserProfile.Entity;
				if (((previousValue != value) 
							|| (this._UserProfile.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserProfile.Entity = null;
						previousValue.RequestLocks.Remove(this);
					}
					this._UserProfile.Entity = value;
					if ((value != null))
					{
						value.RequestLocks.Add(this);
						this._UserID = value.UserId;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("UserProfile");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Request_RequestLock", Storage="_Request", ThisKey="RequestID", OtherKey="RequestID", IsForeignKey=true)]
		public Request Request
		{
			get
			{
				return this._Request.Entity;
			}
			set
			{
				Request previousValue = this._Request.Entity;
				if (((previousValue != value) 
							|| (this._Request.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Request.Entity = null;
						previousValue.RequestLocks.Remove(this);
					}
					this._Request.Entity = value;
					if ((value != null))
					{
						value.RequestLocks.Add(this);
						this._RequestID = value.RequestID;
					}
					else
					{
						this._RequestID = default(long);
					}
					this.SendPropertyChanged("Request");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserProfile")]
	public partial class UserProfile : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserId;
		
		private string _UserName;
		
		private string _UserFullName;
		
		private string _UserEmail;
		
		private bool _UserStatus;
		
		private EntitySet<RequestLock> _RequestLocks;
		
		private EntitySet<UserGroups> _UserGroups;
		
		private EntitySet<AuditLog> _AuditLogs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnUserFullNameChanging(string value);
    partial void OnUserFullNameChanged();
    partial void OnUserEmailChanging(string value);
    partial void OnUserEmailChanged();
    partial void OnUserStatusChanging(bool value);
    partial void OnUserStatusChanged();
    #endregion
		
		public UserProfile()
		{
			this._RequestLocks = new EntitySet<RequestLock>(new Action<RequestLock>(this.attach_RequestLocks), new Action<RequestLock>(this.detach_RequestLocks));
			this._UserGroups = new EntitySet<UserGroups>(new Action<UserGroups>(this.attach_UserGroups), new Action<UserGroups>(this.detach_UserGroups));
			this._AuditLogs = new EntitySet<AuditLog>(new Action<AuditLog>(this.attach_AuditLogs), new Action<AuditLog>(this.detach_AuditLogs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NVarChar(56) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserFullName", DbType="NVarChar(MAX)")]
		public string UserFullName
		{
			get
			{
				return this._UserFullName;
			}
			set
			{
				if ((this._UserFullName != value))
				{
					this.OnUserFullNameChanging(value);
					this.SendPropertyChanging();
					this._UserFullName = value;
					this.SendPropertyChanged("UserFullName");
					this.OnUserFullNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserEmail", DbType="NVarChar(MAX)")]
		public string UserEmail
		{
			get
			{
				return this._UserEmail;
			}
			set
			{
				if ((this._UserEmail != value))
				{
					this.OnUserEmailChanging(value);
					this.SendPropertyChanging();
					this._UserEmail = value;
					this.SendPropertyChanged("UserEmail");
					this.OnUserEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserStatus", DbType="Bit NOT NULL")]
		public bool UserStatus
		{
			get
			{
				return this._UserStatus;
			}
			set
			{
				if ((this._UserStatus != value))
				{
					this.OnUserStatusChanging(value);
					this.SendPropertyChanging();
					this._UserStatus = value;
					this.SendPropertyChanged("UserStatus");
					this.OnUserStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserProfile_RequestLock", Storage="_RequestLocks", ThisKey="UserId", OtherKey="UserID")]
		public EntitySet<RequestLock> RequestLocks
		{
			get
			{
				return this._RequestLocks;
			}
			set
			{
				this._RequestLocks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserProfile_UserGroups", Storage="_UserGroups", ThisKey="UserId", OtherKey="UserID")]
		public EntitySet<UserGroups> UserGroups
		{
			get
			{
				return this._UserGroups;
			}
			set
			{
				this._UserGroups.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserProfile_AuditLog", Storage="_AuditLogs", ThisKey="UserId", OtherKey="UserID")]
		public EntitySet<AuditLog> AuditLogs
		{
			get
			{
				return this._AuditLogs;
			}
			set
			{
				this._AuditLogs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_RequestLocks(RequestLock entity)
		{
			this.SendPropertyChanging();
			entity.UserProfile = this;
		}
		
		private void detach_RequestLocks(RequestLock entity)
		{
			this.SendPropertyChanging();
			entity.UserProfile = null;
		}
		
		private void attach_UserGroups(UserGroups entity)
		{
			this.SendPropertyChanging();
			entity.UserProfile = this;
		}
		
		private void detach_UserGroups(UserGroups entity)
		{
			this.SendPropertyChanging();
			entity.UserProfile = null;
		}
		
		private void attach_AuditLogs(AuditLog entity)
		{
			this.SendPropertyChanging();
			entity.UserProfile = this;
		}
		
		private void detach_AuditLogs(AuditLog entity)
		{
			this.SendPropertyChanging();
			entity.UserProfile = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserGroups")]
	public partial class UserGroups : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _GroupID;
		
		private int _UserID;
		
		private EntityRef<UserGroup> _UserGroup;
		
		private EntityRef<UserProfile> _UserProfile;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGroupIDChanging(int value);
    partial void OnGroupIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    #endregion
		
		public UserGroups()
		{
			this._UserGroup = default(EntityRef<UserGroup>);
			this._UserProfile = default(EntityRef<UserProfile>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int GroupID
		{
			get
			{
				return this._GroupID;
			}
			set
			{
				if ((this._GroupID != value))
				{
					if (this._UserGroup.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGroupIDChanging(value);
					this.SendPropertyChanging();
					this._GroupID = value;
					this.SendPropertyChanged("GroupID");
					this.OnGroupIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._UserProfile.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserGroup_UserGroups", Storage="_UserGroup", ThisKey="GroupID", OtherKey="GroupID", IsForeignKey=true)]
		public UserGroup UserGroup
		{
			get
			{
				return this._UserGroup.Entity;
			}
			set
			{
				UserGroup previousValue = this._UserGroup.Entity;
				if (((previousValue != value) 
							|| (this._UserGroup.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserGroup.Entity = null;
						previousValue.UserGroups.Remove(this);
					}
					this._UserGroup.Entity = value;
					if ((value != null))
					{
						value.UserGroups.Add(this);
						this._GroupID = value.GroupID;
					}
					else
					{
						this._GroupID = default(int);
					}
					this.SendPropertyChanged("UserGroup");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserProfile_UserGroups", Storage="_UserProfile", ThisKey="UserID", OtherKey="UserId", IsForeignKey=true)]
		public UserProfile UserProfile
		{
			get
			{
				return this._UserProfile.Entity;
			}
			set
			{
				UserProfile previousValue = this._UserProfile.Entity;
				if (((previousValue != value) 
							|| (this._UserProfile.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserProfile.Entity = null;
						previousValue.UserGroups.Remove(this);
					}
					this._UserProfile.Entity = value;
					if ((value != null))
					{
						value.UserGroups.Add(this);
						this._UserID = value.UserId;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("UserProfile");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.KeywordQuestion")]
	public partial class KeywordQuestion : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _KeywordID;
		
		private long _RequestID;
		
		private long _QuestionResponseID;
		
		private EntityRef<QuestionResponse> _QuestionResponse;
		
		private EntityRef<Keyword> _Keyword;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnKeywordIDChanging(int value);
    partial void OnKeywordIDChanged();
    partial void OnRequestIDChanging(long value);
    partial void OnRequestIDChanged();
    partial void OnQuestionResponseIDChanging(long value);
    partial void OnQuestionResponseIDChanged();
    #endregion
		
		public KeywordQuestion()
		{
			this._QuestionResponse = default(EntityRef<QuestionResponse>);
			this._Keyword = default(EntityRef<Keyword>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_KeywordID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int KeywordID
		{
			get
			{
				return this._KeywordID;
			}
			set
			{
				if ((this._KeywordID != value))
				{
					if (this._Keyword.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnKeywordIDChanging(value);
					this.SendPropertyChanging();
					this._KeywordID = value;
					this.SendPropertyChanged("KeywordID");
					this.OnKeywordIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RequestID", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long RequestID
		{
			get
			{
				return this._RequestID;
			}
			set
			{
				if ((this._RequestID != value))
				{
					if (this._QuestionResponse.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRequestIDChanging(value);
					this.SendPropertyChanging();
					this._RequestID = value;
					this.SendPropertyChanged("RequestID");
					this.OnRequestIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuestionResponseID", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long QuestionResponseID
		{
			get
			{
				return this._QuestionResponseID;
			}
			set
			{
				if ((this._QuestionResponseID != value))
				{
					if (this._QuestionResponse.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnQuestionResponseIDChanging(value);
					this.SendPropertyChanging();
					this._QuestionResponseID = value;
					this.SendPropertyChanged("QuestionResponseID");
					this.OnQuestionResponseIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="QuestionResponse_KeywordQuestion", Storage="_QuestionResponse", ThisKey="QuestionResponseID,RequestID", OtherKey="QuestionResponseID,RequestID", IsForeignKey=true)]
		public QuestionResponse QuestionResponse
		{
			get
			{
				return this._QuestionResponse.Entity;
			}
			set
			{
				QuestionResponse previousValue = this._QuestionResponse.Entity;
				if (((previousValue != value) 
							|| (this._QuestionResponse.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._QuestionResponse.Entity = null;
						previousValue.KeywordQuestions.Remove(this);
					}
					this._QuestionResponse.Entity = value;
					if ((value != null))
					{
						value.KeywordQuestions.Add(this);
						this._QuestionResponseID = value.QuestionResponseID;
						this._RequestID = value.RequestID;
					}
					else
					{
						this._QuestionResponseID = default(long);
						this._RequestID = default(long);
					}
					this.SendPropertyChanged("QuestionResponse");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Keyword_KeywordQuestion", Storage="_Keyword", ThisKey="KeywordID", OtherKey="KeywordID", IsForeignKey=true)]
		public Keyword Keyword
		{
			get
			{
				return this._Keyword.Entity;
			}
			set
			{
				Keyword previousValue = this._Keyword.Entity;
				if (((previousValue != value) 
							|| (this._Keyword.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Keyword.Entity = null;
						previousValue.KeywordQuestions.Remove(this);
					}
					this._Keyword.Entity = value;
					if ((value != null))
					{
						value.KeywordQuestions.Add(this);
						this._KeywordID = value.KeywordID;
					}
					else
					{
						this._KeywordID = default(int);
					}
					this.SendPropertyChanged("Keyword");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AuditLog")]
	public partial class AuditLog : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _RequestID;
		
		private int _UserID;
		
		private byte _AuditType;
		
		private System.DateTime _AuditDate;
		
		private EntityRef<UserProfile> _UserProfile;
		
		private EntityRef<Request> _Request;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRequestIDChanging(long value);
    partial void OnRequestIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnAuditTypeChanging(byte value);
    partial void OnAuditTypeChanged();
    partial void OnAuditDateChanging(System.DateTime value);
    partial void OnAuditDateChanged();
    #endregion
		
		public AuditLog()
		{
			this._UserProfile = default(EntityRef<UserProfile>);
			this._Request = default(EntityRef<Request>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RequestID", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long RequestID
		{
			get
			{
				return this._RequestID;
			}
			set
			{
				if ((this._RequestID != value))
				{
					if (this._Request.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRequestIDChanging(value);
					this.SendPropertyChanging();
					this._RequestID = value;
					this.SendPropertyChanged("RequestID");
					this.OnRequestIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._UserProfile.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AuditType", DbType="TinyInt NOT NULL", IsPrimaryKey=true)]
		public byte AuditType
		{
			get
			{
				return this._AuditType;
			}
			set
			{
				if ((this._AuditType != value))
				{
					this.OnAuditTypeChanging(value);
					this.SendPropertyChanging();
					this._AuditType = value;
					this.SendPropertyChanged("AuditType");
					this.OnAuditTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AuditDate", DbType="DateTime NOT NULL", IsPrimaryKey=true)]
		public System.DateTime AuditDate
		{
			get
			{
				return this._AuditDate;
			}
			set
			{
				if ((this._AuditDate != value))
				{
					this.OnAuditDateChanging(value);
					this.SendPropertyChanging();
					this._AuditDate = value;
					this.SendPropertyChanged("AuditDate");
					this.OnAuditDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserProfile_AuditLog", Storage="_UserProfile", ThisKey="UserID", OtherKey="UserId", IsForeignKey=true)]
		public UserProfile UserProfile
		{
			get
			{
				return this._UserProfile.Entity;
			}
			set
			{
				UserProfile previousValue = this._UserProfile.Entity;
				if (((previousValue != value) 
							|| (this._UserProfile.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserProfile.Entity = null;
						previousValue.AuditLogs.Remove(this);
					}
					this._UserProfile.Entity = value;
					if ((value != null))
					{
						value.AuditLogs.Add(this);
						this._UserID = value.UserId;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("UserProfile");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Request_AuditLog", Storage="_Request", ThisKey="RequestID", OtherKey="RequestID", IsForeignKey=true)]
		public Request Request
		{
			get
			{
				return this._Request.Entity;
			}
			set
			{
				Request previousValue = this._Request.Entity;
				if (((previousValue != value) 
							|| (this._Request.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Request.Entity = null;
						previousValue.AuditLogs.Remove(this);
					}
					this._Request.Entity = value;
					if ((value != null))
					{
						value.AuditLogs.Add(this);
						this._RequestID = value.RequestID;
					}
					else
					{
						this._RequestID = default(long);
					}
					this.SendPropertyChanged("Request");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Request")]
	public partial class Request : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _RequestID;
		
		private System.Nullable<long> _ParentRequestID;
		
		private string _RequestorFName;
		
		private string _RequestorLName;
		
		private string _RequestorPhone;
		
		private string _RequestorPhoneExt;
		
		private string _RequestorEmail;
		
		private string _PatientFName;
		
		private string _PatientLName;
		
		private System.Nullable<byte> _PatientGender;
		
		private System.Nullable<byte> _PatientAge;
		
		private string _PatientAgencyID;
		
		private byte _RequestStatus;
		
		private System.DateTime _TimeOpened;
		
		private System.Nullable<System.DateTime> _TimeClosed;
		
		private System.Nullable<int> _RegionID;
		
		private System.Nullable<int> _RequestorTypeID;
		
		private EntitySet<QuestionResponse> _QuestionResponses;
		
		private EntitySet<RequestLock> _RequestLocks;
		
		private EntitySet<AuditLog> _AuditLogs;
		
		private EntitySet<Request> _Requests;
		
		private EntityRef<Region> _Region;
		
		private EntityRef<Request> _Request1;
		
		private EntityRef<RequestorType> _RequestorType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRequestIDChanging(long value);
    partial void OnRequestIDChanged();
    partial void OnParentRequestIDChanging(System.Nullable<long> value);
    partial void OnParentRequestIDChanged();
    partial void OnRequestorFNameChanging(string value);
    partial void OnRequestorFNameChanged();
    partial void OnRequestorLNameChanging(string value);
    partial void OnRequestorLNameChanged();
    partial void OnRequestorPhoneChanging(string value);
    partial void OnRequestorPhoneChanged();
    partial void OnRequestorPhoneExtChanging(string value);
    partial void OnRequestorPhoneExtChanged();
    partial void OnRequestorEmailChanging(string value);
    partial void OnRequestorEmailChanged();
    partial void OnPatientFNameChanging(string value);
    partial void OnPatientFNameChanged();
    partial void OnPatientLNameChanging(string value);
    partial void OnPatientLNameChanged();
    partial void OnPatientGenderChanging(System.Nullable<byte> value);
    partial void OnPatientGenderChanged();
    partial void OnPatientAgeChanging(System.Nullable<byte> value);
    partial void OnPatientAgeChanged();
    partial void OnPatientAgencyIDChanging(string value);
    partial void OnPatientAgencyIDChanged();
    partial void OnRequestStatusChanging(byte value);
    partial void OnRequestStatusChanged();
    partial void OnTimeOpenedChanging(System.DateTime value);
    partial void OnTimeOpenedChanged();
    partial void OnTimeClosedChanging(System.Nullable<System.DateTime> value);
    partial void OnTimeClosedChanged();
    partial void OnRegionIDChanging(System.Nullable<int> value);
    partial void OnRegionIDChanged();
    partial void OnRequestorTypeIDChanging(System.Nullable<int> value);
    partial void OnRequestorTypeIDChanged();
    #endregion
		
		public Request()
		{
			this._QuestionResponses = new EntitySet<QuestionResponse>(new Action<QuestionResponse>(this.attach_QuestionResponses), new Action<QuestionResponse>(this.detach_QuestionResponses));
			this._RequestLocks = new EntitySet<RequestLock>(new Action<RequestLock>(this.attach_RequestLocks), new Action<RequestLock>(this.detach_RequestLocks));
			this._AuditLogs = new EntitySet<AuditLog>(new Action<AuditLog>(this.attach_AuditLogs), new Action<AuditLog>(this.detach_AuditLogs));
			this._Requests = new EntitySet<Request>(new Action<Request>(this.attach_Requests), new Action<Request>(this.detach_Requests));
			this._Region = default(EntityRef<Region>);
			this._Request1 = default(EntityRef<Request>);
			this._RequestorType = default(EntityRef<RequestorType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RequestID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long RequestID
		{
			get
			{
				return this._RequestID;
			}
			set
			{
				if ((this._RequestID != value))
				{
					this.OnRequestIDChanging(value);
					this.SendPropertyChanging();
					this._RequestID = value;
					this.SendPropertyChanged("RequestID");
					this.OnRequestIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentRequestID", DbType="BigInt")]
		public System.Nullable<long> ParentRequestID
		{
			get
			{
				return this._ParentRequestID;
			}
			set
			{
				if ((this._ParentRequestID != value))
				{
					if (this._Request1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentRequestIDChanging(value);
					this.SendPropertyChanging();
					this._ParentRequestID = value;
					this.SendPropertyChanged("ParentRequestID");
					this.OnParentRequestIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RequestorFName", DbType="NVarChar(64)")]
		public string RequestorFName
		{
			get
			{
				return this._RequestorFName;
			}
			set
			{
				if ((this._RequestorFName != value))
				{
					this.OnRequestorFNameChanging(value);
					this.SendPropertyChanging();
					this._RequestorFName = value;
					this.SendPropertyChanged("RequestorFName");
					this.OnRequestorFNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RequestorLName", DbType="NVarChar(64)")]
		public string RequestorLName
		{
			get
			{
				return this._RequestorLName;
			}
			set
			{
				if ((this._RequestorLName != value))
				{
					this.OnRequestorLNameChanging(value);
					this.SendPropertyChanging();
					this._RequestorLName = value;
					this.SendPropertyChanged("RequestorLName");
					this.OnRequestorLNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RequestorPhone", DbType="NVarChar(20)")]
		public string RequestorPhone
		{
			get
			{
				return this._RequestorPhone;
			}
			set
			{
				if ((this._RequestorPhone != value))
				{
					this.OnRequestorPhoneChanging(value);
					this.SendPropertyChanging();
					this._RequestorPhone = value;
					this.SendPropertyChanged("RequestorPhone");
					this.OnRequestorPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RequestorPhoneExt", DbType="NVarChar(15)")]
		public string RequestorPhoneExt
		{
			get
			{
				return this._RequestorPhoneExt;
			}
			set
			{
				if ((this._RequestorPhoneExt != value))
				{
					this.OnRequestorPhoneExtChanging(value);
					this.SendPropertyChanging();
					this._RequestorPhoneExt = value;
					this.SendPropertyChanged("RequestorPhoneExt");
					this.OnRequestorPhoneExtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RequestorEmail", DbType="NVarChar(64)")]
		public string RequestorEmail
		{
			get
			{
				return this._RequestorEmail;
			}
			set
			{
				if ((this._RequestorEmail != value))
				{
					this.OnRequestorEmailChanging(value);
					this.SendPropertyChanging();
					this._RequestorEmail = value;
					this.SendPropertyChanged("RequestorEmail");
					this.OnRequestorEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PatientFName", DbType="NVarChar(64)")]
		public string PatientFName
		{
			get
			{
				return this._PatientFName;
			}
			set
			{
				if ((this._PatientFName != value))
				{
					this.OnPatientFNameChanging(value);
					this.SendPropertyChanging();
					this._PatientFName = value;
					this.SendPropertyChanged("PatientFName");
					this.OnPatientFNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PatientLName", DbType="NVarChar(64)")]
		public string PatientLName
		{
			get
			{
				return this._PatientLName;
			}
			set
			{
				if ((this._PatientLName != value))
				{
					this.OnPatientLNameChanging(value);
					this.SendPropertyChanging();
					this._PatientLName = value;
					this.SendPropertyChanged("PatientLName");
					this.OnPatientLNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PatientGender", DbType="TinyInt")]
		public System.Nullable<byte> PatientGender
		{
			get
			{
				return this._PatientGender;
			}
			set
			{
				if ((this._PatientGender != value))
				{
					this.OnPatientGenderChanging(value);
					this.SendPropertyChanging();
					this._PatientGender = value;
					this.SendPropertyChanged("PatientGender");
					this.OnPatientGenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PatientAge", DbType="TinyInt")]
		public System.Nullable<byte> PatientAge
		{
			get
			{
				return this._PatientAge;
			}
			set
			{
				if ((this._PatientAge != value))
				{
					this.OnPatientAgeChanging(value);
					this.SendPropertyChanging();
					this._PatientAge = value;
					this.SendPropertyChanged("PatientAge");
					this.OnPatientAgeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PatientAgencyID", DbType="NVarChar(15)")]
		public string PatientAgencyID
		{
			get
			{
				return this._PatientAgencyID;
			}
			set
			{
				if ((this._PatientAgencyID != value))
				{
					this.OnPatientAgencyIDChanging(value);
					this.SendPropertyChanging();
					this._PatientAgencyID = value;
					this.SendPropertyChanged("PatientAgencyID");
					this.OnPatientAgencyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RequestStatus", DbType="TinyInt NOT NULL")]
		public byte RequestStatus
		{
			get
			{
				return this._RequestStatus;
			}
			set
			{
				if ((this._RequestStatus != value))
				{
					this.OnRequestStatusChanging(value);
					this.SendPropertyChanging();
					this._RequestStatus = value;
					this.SendPropertyChanged("RequestStatus");
					this.OnRequestStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeOpened", DbType="DateTime NOT NULL")]
		public System.DateTime TimeOpened
		{
			get
			{
				return this._TimeOpened;
			}
			set
			{
				if ((this._TimeOpened != value))
				{
					this.OnTimeOpenedChanging(value);
					this.SendPropertyChanging();
					this._TimeOpened = value;
					this.SendPropertyChanged("TimeOpened");
					this.OnTimeOpenedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeClosed", DbType="DateTime")]
		public System.Nullable<System.DateTime> TimeClosed
		{
			get
			{
				return this._TimeClosed;
			}
			set
			{
				if ((this._TimeClosed != value))
				{
					this.OnTimeClosedChanging(value);
					this.SendPropertyChanging();
					this._TimeClosed = value;
					this.SendPropertyChanged("TimeClosed");
					this.OnTimeClosedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RegionID", DbType="Int")]
		public System.Nullable<int> RegionID
		{
			get
			{
				return this._RegionID;
			}
			set
			{
				if ((this._RegionID != value))
				{
					if (this._Region.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRegionIDChanging(value);
					this.SendPropertyChanging();
					this._RegionID = value;
					this.SendPropertyChanged("RegionID");
					this.OnRegionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RequestorTypeID", DbType="Int")]
		public System.Nullable<int> RequestorTypeID
		{
			get
			{
				return this._RequestorTypeID;
			}
			set
			{
				if ((this._RequestorTypeID != value))
				{
					if (this._RequestorType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRequestorTypeIDChanging(value);
					this.SendPropertyChanging();
					this._RequestorTypeID = value;
					this.SendPropertyChanged("RequestorTypeID");
					this.OnRequestorTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Request_QuestionResponse", Storage="_QuestionResponses", ThisKey="RequestID", OtherKey="RequestID")]
		public EntitySet<QuestionResponse> QuestionResponses
		{
			get
			{
				return this._QuestionResponses;
			}
			set
			{
				this._QuestionResponses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Request_RequestLock", Storage="_RequestLocks", ThisKey="RequestID", OtherKey="RequestID")]
		public EntitySet<RequestLock> RequestLocks
		{
			get
			{
				return this._RequestLocks;
			}
			set
			{
				this._RequestLocks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Request_AuditLog", Storage="_AuditLogs", ThisKey="RequestID", OtherKey="RequestID")]
		public EntitySet<AuditLog> AuditLogs
		{
			get
			{
				return this._AuditLogs;
			}
			set
			{
				this._AuditLogs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Request_Request", Storage="_Requests", ThisKey="RequestID", OtherKey="ParentRequestID")]
		public EntitySet<Request> Requests
		{
			get
			{
				return this._Requests;
			}
			set
			{
				this._Requests.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Region_Request", Storage="_Region", ThisKey="RegionID", OtherKey="RegionID", IsForeignKey=true)]
		public Region Region
		{
			get
			{
				return this._Region.Entity;
			}
			set
			{
				Region previousValue = this._Region.Entity;
				if (((previousValue != value) 
							|| (this._Region.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Region.Entity = null;
						previousValue.Requests.Remove(this);
					}
					this._Region.Entity = value;
					if ((value != null))
					{
						value.Requests.Add(this);
						this._RegionID = value.RegionID;
					}
					else
					{
						this._RegionID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Region");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Request_Request", Storage="_Request1", ThisKey="ParentRequestID", OtherKey="RequestID", IsForeignKey=true)]
		public Request Request1
		{
			get
			{
				return this._Request1.Entity;
			}
			set
			{
				Request previousValue = this._Request1.Entity;
				if (((previousValue != value) 
							|| (this._Request1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Request1.Entity = null;
						previousValue.Requests.Remove(this);
					}
					this._Request1.Entity = value;
					if ((value != null))
					{
						value.Requests.Add(this);
						this._ParentRequestID = value.RequestID;
					}
					else
					{
						this._ParentRequestID = default(Nullable<long>);
					}
					this.SendPropertyChanged("Request1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RequestorType_Request", Storage="_RequestorType", ThisKey="RequestorTypeID", OtherKey="RequestorTypeID", IsForeignKey=true)]
		public RequestorType RequestorType
		{
			get
			{
				return this._RequestorType.Entity;
			}
			set
			{
				RequestorType previousValue = this._RequestorType.Entity;
				if (((previousValue != value) 
							|| (this._RequestorType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RequestorType.Entity = null;
						previousValue.Requests.Remove(this);
					}
					this._RequestorType.Entity = value;
					if ((value != null))
					{
						value.Requests.Add(this);
						this._RequestorTypeID = value.RequestorTypeID;
					}
					else
					{
						this._RequestorTypeID = default(Nullable<int>);
					}
					this.SendPropertyChanged("RequestorType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_QuestionResponses(QuestionResponse entity)
		{
			this.SendPropertyChanging();
			entity.Request = this;
		}
		
		private void detach_QuestionResponses(QuestionResponse entity)
		{
			this.SendPropertyChanging();
			entity.Request = null;
		}
		
		private void attach_RequestLocks(RequestLock entity)
		{
			this.SendPropertyChanging();
			entity.Request = this;
		}
		
		private void detach_RequestLocks(RequestLock entity)
		{
			this.SendPropertyChanging();
			entity.Request = null;
		}
		
		private void attach_AuditLogs(AuditLog entity)
		{
			this.SendPropertyChanging();
			entity.Request = this;
		}
		
		private void detach_AuditLogs(AuditLog entity)
		{
			this.SendPropertyChanging();
			entity.Request = null;
		}
		
		private void attach_Requests(Request entity)
		{
			this.SendPropertyChanging();
			entity.Request1 = this;
		}
		
		private void detach_Requests(Request entity)
		{
			this.SendPropertyChanging();
			entity.Request1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Keyword")]
	public partial class Keyword : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _KeywordID;
		
		private string _KeywordValue;
		
		private bool _Active;
		
		private EntitySet<KeywordQuestion> _KeywordQuestions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnKeywordIDChanging(int value);
    partial void OnKeywordIDChanged();
    partial void OnKeywordValueChanging(string value);
    partial void OnKeywordValueChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    #endregion
		
		public Keyword()
		{
			this._KeywordQuestions = new EntitySet<KeywordQuestion>(new Action<KeywordQuestion>(this.attach_KeywordQuestions), new Action<KeywordQuestion>(this.detach_KeywordQuestions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_KeywordID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int KeywordID
		{
			get
			{
				return this._KeywordID;
			}
			set
			{
				if ((this._KeywordID != value))
				{
					this.OnKeywordIDChanging(value);
					this.SendPropertyChanging();
					this._KeywordID = value;
					this.SendPropertyChanged("KeywordID");
					this.OnKeywordIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_KeywordValue", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string KeywordValue
		{
			get
			{
				return this._KeywordValue;
			}
			set
			{
				if ((this._KeywordValue != value))
				{
					this.OnKeywordValueChanging(value);
					this.SendPropertyChanging();
					this._KeywordValue = value;
					this.SendPropertyChanged("KeywordValue");
					this.OnKeywordValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Keyword_KeywordQuestion", Storage="_KeywordQuestions", ThisKey="KeywordID", OtherKey="KeywordID")]
		public EntitySet<KeywordQuestion> KeywordQuestions
		{
			get
			{
				return this._KeywordQuestions;
			}
			set
			{
				this._KeywordQuestions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_KeywordQuestions(KeywordQuestion entity)
		{
			this.SendPropertyChanging();
			entity.Keyword = this;
		}
		
		private void detach_KeywordQuestions(KeywordQuestion entity)
		{
			this.SendPropertyChanging();
			entity.Keyword = null;
		}
	}
}
#pragma warning restore 1591
